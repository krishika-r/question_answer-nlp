{
    "data": [
        {
            "id": "56ddde6b9a695914005b9628",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "In what country is Normandy located?",
            "answers": {
                "text": [
                    "France",
                    "France",
                    "France",
                    "France"
                ],
                "answer_start": [
                    159,
                    159,
                    159,
                    159
                ]
            }
        },
        {
            "id": "56ddde6b9a695914005b9629",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "When were the Normans in Normandy?",
            "answers": {
                "text": [
                    "10th and 11th centuries",
                    "in the 10th and 11th centuries",
                    "10th and 11th centuries",
                    "10th and 11th centuries"
                ],
                "answer_start": [
                    94,
                    87,
                    94,
                    94
                ]
            }
        },
        {
            "id": "56ddde6b9a695914005b962a",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "From which countries did the Norse originate?",
            "answers": {
                "text": [
                    "Denmark, Iceland and Norway",
                    "Denmark, Iceland and Norway",
                    "Denmark, Iceland and Norway",
                    "Denmark, Iceland and Norway"
                ],
                "answer_start": [
                    256,
                    256,
                    256,
                    256
                ]
            }
        },
        {
            "id": "56ddde6b9a695914005b962b",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "Who was the Norse leader?",
            "answers": {
                "text": [
                    "Rollo",
                    "Rollo",
                    "Rollo",
                    "Rollo"
                ],
                "answer_start": [
                    308,
                    308,
                    308,
                    308
                ]
            }
        },
        {
            "id": "56ddde6b9a695914005b962c",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "What century did the Normans first gain their separate identity?",
            "answers": {
                "text": [
                    "10th century",
                    "the first half of the 10th century",
                    "10th",
                    "10th"
                ],
                "answer_start": [
                    671,
                    649,
                    671,
                    671
                ]
            }
        },
        {
            "id": "5ad39d53604f3c001a3fe8d1",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "Who gave their name to Normandy in the 1000's and 1100's",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad39d53604f3c001a3fe8d2",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "What is France a region of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad39d53604f3c001a3fe8d3",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "Who did King Charles III swear fealty to?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad39d53604f3c001a3fe8d4",
            "title": "Normans",
            "context": "The Normans (Norman: Nourmands; French: Normands; Latin: Normanni) were the people who in the 10th and 11th centuries gave their name to Normandy, a region in France. They were descended from Norse (\"Norman\" comes from \"Norseman\") raiders and pirates from Denmark, Iceland and Norway who, under their leader Rollo, agreed to swear fealty to King Charles III of West Francia. Through generations of assimilation and mixing with the native Frankish and Roman-Gaulish populations, their descendants would gradually merge with the Carolingian-based cultures of West Francia. The distinct cultural and ethnic identity of the Normans emerged initially in the first half of the 10th century, and it continued to evolve over the succeeding centuries.",
            "question": "When did the Frankish identity emerge?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dddf4066d3e219004dad5f",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "Who was the duke in the battle of Hastings?",
            "answers": {
                "text": [
                    "William the Conqueror",
                    "William the Conqueror",
                    "William the Conqueror"
                ],
                "answer_start": [
                    1022,
                    1022,
                    1022
                ]
            }
        },
        {
            "id": "56dddf4066d3e219004dad60",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "Who ruled the duchy of Normandy",
            "answers": {
                "text": [
                    "Richard I",
                    "Richard I",
                    "Richard I"
                ],
                "answer_start": [
                    573,
                    573,
                    573
                ]
            }
        },
        {
            "id": "56dddf4066d3e219004dad61",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "What religion were the Normans",
            "answers": {
                "text": [
                    "Catholic",
                    "Catholic orthodoxy",
                    "Catholic"
                ],
                "answer_start": [
                    230,
                    230,
                    230
                ]
            }
        },
        {
            "id": "5ad3a266604f3c001a3fea27",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "What type of major impact did the Norman dynasty have on modern Europe?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3a266604f3c001a3fea28",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "Who was famed for their Christian spirit?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3a266604f3c001a3fea29",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "Who assimilted the Roman language?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3a266604f3c001a3fea2a",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "Who ruled the country of Normandy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3a266604f3c001a3fea2b",
            "title": "Normans",
            "context": "The Norman dynasty had a major political, cultural and military impact on medieval Europe and even the Near East. The Normans were famed for their martial spirit and eventually for their Christian piety, becoming exponents of the Catholic orthodoxy into which they assimilated. They adopted the Gallo-Romance language of the Frankish land they settled, their dialect becoming known as Norman, Normaund or Norman French, an important literary language. The Duchy of Normandy, which they formed by treaty with the French crown, was a great fief of medieval France, and under Richard I of Normandy was forged into a cohesive and formidable principality in feudal tenure. The Normans are noted both for their culture, such as their unique Romanesque architecture and musical traditions, and for their significant military accomplishments and innovations. Norman adventurers founded the Kingdom of Sicily under Roger II after conquering southern Italy on the Saracens and Byzantines, and an expedition on behalf of their duke, William the Conqueror, led to the Norman conquest of England at the Battle of Hastings in 1066. Norman cultural and military influence spread from these new European centres to the Crusader states of the Near East, where their prince Bohemond I founded the Principality of Antioch in the Levant, to Scotland and Wales in Great Britain, to Ireland, and to the coasts of north Africa and the Canary Islands.",
            "question": "What principality did William the conquerer found?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dde0379a695914005b9636",
            "title": "Normans",
            "context": "The English name \"Normans\" comes from the French words Normans/Normanz, plural of Normant, modern French normand, which is itself borrowed from Old Low Franconian Nortmann \"Northman\" or directly from Old Norse Norðmaðr, Latinized variously as Nortmannus, Normannus, or Nordmannus (recorded in Medieval Latin, 9th century) to mean \"Norseman, Viking\".",
            "question": "What is the original meaning of the word Norman?",
            "answers": {
                "text": [
                    "Viking",
                    "Norseman, Viking",
                    "Norseman, Viking"
                ],
                "answer_start": [
                    341,
                    331,
                    331
                ]
            }
        },
        {
            "id": "56dde0379a695914005b9637",
            "title": "Normans",
            "context": "The English name \"Normans\" comes from the French words Normans/Normanz, plural of Normant, modern French normand, which is itself borrowed from Old Low Franconian Nortmann \"Northman\" or directly from Old Norse Norðmaðr, Latinized variously as Nortmannus, Normannus, or Nordmannus (recorded in Medieval Latin, 9th century) to mean \"Norseman, Viking\".",
            "question": "When was the Latin version of the word Norman first recorded?",
            "answers": {
                "text": [
                    "9th century",
                    "9th century",
                    "9th century"
                ],
                "answer_start": [
                    309,
                    309,
                    309
                ]
            }
        },
        {
            "id": "5ad3ab70604f3c001a3feb89",
            "title": "Normans",
            "context": "The English name \"Normans\" comes from the French words Normans/Normanz, plural of Normant, modern French normand, which is itself borrowed from Old Low Franconian Nortmann \"Northman\" or directly from Old Norse Norðmaðr, Latinized variously as Nortmannus, Normannus, or Nordmannus (recorded in Medieval Latin, 9th century) to mean \"Norseman, Viking\".",
            "question": "What name comes from the English words Normans/Normanz?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ab70604f3c001a3feb8a",
            "title": "Normans",
            "context": "The English name \"Normans\" comes from the French words Normans/Normanz, plural of Normant, modern French normand, which is itself borrowed from Old Low Franconian Nortmann \"Northman\" or directly from Old Norse Norðmaðr, Latinized variously as Nortmannus, Normannus, or Nordmannus (recorded in Medieval Latin, 9th century) to mean \"Norseman, Viking\".",
            "question": "When was the French version of the word Norman first recorded?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dde0ba66d3e219004dad75",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "When was the Duchy of Normandy founded?",
            "answers": {
                "text": [
                    "911",
                    "911",
                    "911"
                ],
                "answer_start": [
                    244,
                    244,
                    244
                ]
            }
        },
        {
            "id": "56dde0ba66d3e219004dad76",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "Who did Rollo sign the treaty of Saint-Clair-sur-Epte with?",
            "answers": {
                "text": [
                    "King Charles III",
                    "King Charles III",
                    "King Charles III"
                ],
                "answer_start": [
                    324,
                    324,
                    324
                ]
            }
        },
        {
            "id": "56dde0ba66d3e219004dad77",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "What river originally bounded the Duchy",
            "answers": {
                "text": [
                    "Seine",
                    "Epte",
                    "Seine"
                ],
                "answer_start": [
                    711,
                    524,
                    711
                ]
            }
        },
        {
            "id": "5ad3ad61604f3c001a3fec0d",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "when did Nors encampments ivolve into destructive incursions?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ad61604f3c001a3fec0e",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "What treaty was established in the 9th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ad61604f3c001a3fec0f",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "Who established a treaty with King Charles the third of France?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ad61604f3c001a3fec10",
            "title": "Normans",
            "context": "In the course of the 10th century, the initially destructive incursions of Norse war bands into the rivers of France evolved into more permanent encampments that included local women and personal property. The Duchy of Normandy, which began in 911 as a fiefdom, was established by the treaty of Saint-Clair-sur-Epte between King Charles III of West Francia and the famed Viking ruler Rollo, and was situated in the former Frankish kingdom of Neustria. The treaty offered Rollo and his men the French lands between the river Epte and the Atlantic coast in exchange for their protection against further Viking incursions. The area corresponded to the northern part of present-day Upper Normandy down to the river Seine, but the Duchy would eventually extend west beyond the Seine. The territory was roughly equivalent to the old province of Rouen, and reproduced the Roman administrative structure of Gallia Lugdunensis II (part of the former Gallia Lugdunensis).",
            "question": "What did the French promises to protect Rollo and his men from?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dde1d966d3e219004dad8d",
            "title": "Normans",
            "context": "Before Rollo's arrival, its populations did not differ from Picardy or the Île-de-France, which were considered \"Frankish\". Earlier Viking settlers had begun arriving in the 880s, but were divided between colonies in the east (Roumois and Pays de Caux) around the low Seine valley and in the west in the Cotentin Peninsula, and were separated by traditional pagii, where the population remained about the same with almost no foreign settlers. Rollo's contingents who raided and ultimately settled Normandy and parts of the Atlantic coast included Danes, Norwegians, Norse–Gaels, Orkney Vikings, possibly Swedes, and Anglo-Danes from the English Danelaw under Norse control.",
            "question": "Who upon arriving gave the original viking settlers a common identity?",
            "answers": {
                "text": [
                    "Rollo",
                    "Rollo",
                    "Rollo"
                ],
                "answer_start": [
                    7,
                    7,
                    7
                ]
            }
        },
        {
            "id": "5ad3ae14604f3c001a3fec39",
            "title": "Normans",
            "context": "Before Rollo's arrival, its populations did not differ from Picardy or the Île-de-France, which were considered \"Frankish\". Earlier Viking settlers had begun arriving in the 880s, but were divided between colonies in the east (Roumois and Pays de Caux) around the low Seine valley and in the west in the Cotentin Peninsula, and were separated by traditional pagii, where the population remained about the same with almost no foreign settlers. Rollo's contingents who raided and ultimately settled Normandy and parts of the Atlantic coast included Danes, Norwegians, Norse–Gaels, Orkney Vikings, possibly Swedes, and Anglo-Danes from the English Danelaw under Norse control.",
            "question": "When did Rollo begin to arrive in Normandy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ae14604f3c001a3fec3a",
            "title": "Normans",
            "context": "Before Rollo's arrival, its populations did not differ from Picardy or the Île-de-France, which were considered \"Frankish\". Earlier Viking settlers had begun arriving in the 880s, but were divided between colonies in the east (Roumois and Pays de Caux) around the low Seine valley and in the west in the Cotentin Peninsula, and were separated by traditional pagii, where the population remained about the same with almost no foreign settlers. Rollo's contingents who raided and ultimately settled Normandy and parts of the Atlantic coast included Danes, Norwegians, Norse–Gaels, Orkney Vikings, possibly Swedes, and Anglo-Danes from the English Danelaw under Norse control.",
            "question": "What Viking groups were conquered by Rollo?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dde27d9a695914005b9651",
            "title": "Normans",
            "context": "The descendants of Rollo's Vikings and their Frankish wives would replace the Norse religion and Old Norse language with Catholicism (Christianity) and the Gallo-Romance language of the local people, blending their maternal Frankish heritage with Old Norse traditions and customs to synthesize a unique \"Norman\" culture in the north of France. The Norman language was forged by the adoption of the indigenous langue d'oïl branch of Romance by a Norse-speaking ruling class, and it developed into the regional language that survives today.",
            "question": "What was the Norman religion?",
            "answers": {
                "text": [
                    "Catholicism",
                    "Catholicism",
                    "Catholicism"
                ],
                "answer_start": [
                    121,
                    121,
                    121
                ]
            }
        },
        {
            "id": "56dde27d9a695914005b9652",
            "title": "Normans",
            "context": "The descendants of Rollo's Vikings and their Frankish wives would replace the Norse religion and Old Norse language with Catholicism (Christianity) and the Gallo-Romance language of the local people, blending their maternal Frankish heritage with Old Norse traditions and customs to synthesize a unique \"Norman\" culture in the north of France. The Norman language was forged by the adoption of the indigenous langue d'oïl branch of Romance by a Norse-speaking ruling class, and it developed into the regional language that survives today.",
            "question": "What part of France were the Normans located?",
            "answers": {
                "text": [
                    "north",
                    "the north",
                    "north"
                ],
                "answer_start": [
                    327,
                    323,
                    327
                ]
            }
        },
        {
            "id": "5ad3af11604f3c001a3fec63",
            "title": "Normans",
            "context": "The descendants of Rollo's Vikings and their Frankish wives would replace the Norse religion and Old Norse language with Catholicism (Christianity) and the Gallo-Romance language of the local people, blending their maternal Frankish heritage with Old Norse traditions and customs to synthesize a unique \"Norman\" culture in the north of France. The Norman language was forged by the adoption of the indigenous langue d'oïl branch of Romance by a Norse-speaking ruling class, and it developed into the regional language that survives today.",
            "question": "What was replace with the Norse religion?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3af11604f3c001a3fec64",
            "title": "Normans",
            "context": "The descendants of Rollo's Vikings and their Frankish wives would replace the Norse religion and Old Norse language with Catholicism (Christianity) and the Gallo-Romance language of the local people, blending their maternal Frankish heritage with Old Norse traditions and customs to synthesize a unique \"Norman\" culture in the north of France. The Norman language was forged by the adoption of the indigenous langue d'oïl branch of Romance by a Norse-speaking ruling class, and it developed into the regional language that survives today.",
            "question": "What did maternal Old Norse traditions merge with?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3af11604f3c001a3fec65",
            "title": "Normans",
            "context": "The descendants of Rollo's Vikings and their Frankish wives would replace the Norse religion and Old Norse language with Catholicism (Christianity) and the Gallo-Romance language of the local people, blending their maternal Frankish heritage with Old Norse traditions and customs to synthesize a unique \"Norman\" culture in the north of France. The Norman language was forged by the adoption of the indigenous langue d'oïl branch of Romance by a Norse-speaking ruling class, and it developed into the regional language that survives today.",
            "question": "What language replaced the Gallo-Romance language?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56dde2fa66d3e219004dad9b",
            "title": "Normans",
            "context": "The Normans thereafter adopted the growing feudal doctrines of the rest of France, and worked them into a functional hierarchical system in both Normandy and in England. The new Norman rulers were culturally and ethnically distinct from the old French aristocracy, most of whom traced their lineage to Franks of the Carolingian dynasty. Most Norman knights remained poor and land-hungry, and by 1066 Normandy had been exporting fighting horsemen for more than a generation. Many Normans of Italy, France and England eventually served as avid Crusaders under the Italo-Norman prince Bohemund I and the Anglo-Norman king Richard the Lion-Heart.",
            "question": "What was one of the Norman's major exports?",
            "answers": {
                "text": [
                    "fighting horsemen",
                    "fighting horsemen",
                    "fighting horsemen"
                ],
                "answer_start": [
                    428,
                    428,
                    428
                ]
            }
        },
        {
            "id": "5ad3c626604f3c001a3ff011",
            "title": "Normans",
            "context": "The Normans thereafter adopted the growing feudal doctrines of the rest of France, and worked them into a functional hierarchical system in both Normandy and in England. The new Norman rulers were culturally and ethnically distinct from the old French aristocracy, most of whom traced their lineage to Franks of the Carolingian dynasty. Most Norman knights remained poor and land-hungry, and by 1066 Normandy had been exporting fighting horsemen for more than a generation. Many Normans of Italy, France and England eventually served as avid Crusaders under the Italo-Norman prince Bohemund I and the Anglo-Norman king Richard the Lion-Heart.",
            "question": "Who adopted the fuedel doctrines of the Normans?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3c626604f3c001a3ff012",
            "title": "Normans",
            "context": "The Normans thereafter adopted the growing feudal doctrines of the rest of France, and worked them into a functional hierarchical system in both Normandy and in England. The new Norman rulers were culturally and ethnically distinct from the old French aristocracy, most of whom traced their lineage to Franks of the Carolingian dynasty. Most Norman knights remained poor and land-hungry, and by 1066 Normandy had been exporting fighting horsemen for more than a generation. Many Normans of Italy, France and England eventually served as avid Crusaders under the Italo-Norman prince Bohemund I and the Anglo-Norman king Richard the Lion-Heart.",
            "question": "What was one of the Norman's major imports?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3c626604f3c001a3ff013",
            "title": "Normans",
            "context": "The Normans thereafter adopted the growing feudal doctrines of the rest of France, and worked them into a functional hierarchical system in both Normandy and in England. The new Norman rulers were culturally and ethnically distinct from the old French aristocracy, most of whom traced their lineage to Franks of the Carolingian dynasty. Most Norman knights remained poor and land-hungry, and by 1066 Normandy had been exporting fighting horsemen for more than a generation. Many Normans of Italy, France and England eventually served as avid Crusaders under the Italo-Norman prince Bohemund I and the Anglo-Norman king Richard the Lion-Heart.",
            "question": "Who's arristocracy eventually served as avid Crusaders?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de0f6a4396321400ee257f",
            "title": "Normans",
            "context": "Soon after the Normans began to enter Italy, they entered the Byzantine Empire and then Armenia, fighting against the Pechenegs, the Bulgars, and especially the Seljuk Turks. Norman mercenaries were first encouraged to come to the south by the Lombards to act against the Byzantines, but they soon fought in Byzantine service in Sicily. They were prominent alongside Varangian and Lombard contingents in the Sicilian campaign of George Maniaces in 1038–40. There is debate whether the Normans in Greek service actually were from Norman Italy, and it now seems likely only a few came from there. It is also unknown how many of the \"Franks\", as the Byzantines called them, were Normans and not other Frenchmen.",
            "question": "Who was the Normans' main enemy in Italy, the Byzantine Empire and Armenia?",
            "answers": {
                "text": [
                    "Seljuk Turks",
                    "the Pechenegs, the Bulgars, and especially the Seljuk Turks",
                    "the Seljuk Turks"
                ],
                "answer_start": [
                    161,
                    114,
                    157
                ]
            }
        },
        {
            "id": "5ad3dbc6604f3c001a3ff3e9",
            "title": "Normans",
            "context": "Soon after the Normans began to enter Italy, they entered the Byzantine Empire and then Armenia, fighting against the Pechenegs, the Bulgars, and especially the Seljuk Turks. Norman mercenaries were first encouraged to come to the south by the Lombards to act against the Byzantines, but they soon fought in Byzantine service in Sicily. They were prominent alongside Varangian and Lombard contingents in the Sicilian campaign of George Maniaces in 1038–40. There is debate whether the Normans in Greek service actually were from Norman Italy, and it now seems likely only a few came from there. It is also unknown how many of the \"Franks\", as the Byzantines called them, were Normans and not other Frenchmen.",
            "question": "Who entered Italy soon after the Byzantine Empire?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3dbc6604f3c001a3ff3ea",
            "title": "Normans",
            "context": "Soon after the Normans began to enter Italy, they entered the Byzantine Empire and then Armenia, fighting against the Pechenegs, the Bulgars, and especially the Seljuk Turks. Norman mercenaries were first encouraged to come to the south by the Lombards to act against the Byzantines, but they soon fought in Byzantine service in Sicily. They were prominent alongside Varangian and Lombard contingents in the Sicilian campaign of George Maniaces in 1038–40. There is debate whether the Normans in Greek service actually were from Norman Italy, and it now seems likely only a few came from there. It is also unknown how many of the \"Franks\", as the Byzantines called them, were Normans and not other Frenchmen.",
            "question": "Who did the Normans fight in Italy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3dbc6604f3c001a3ff3eb",
            "title": "Normans",
            "context": "Soon after the Normans began to enter Italy, they entered the Byzantine Empire and then Armenia, fighting against the Pechenegs, the Bulgars, and especially the Seljuk Turks. Norman mercenaries were first encouraged to come to the south by the Lombards to act against the Byzantines, but they soon fought in Byzantine service in Sicily. They were prominent alongside Varangian and Lombard contingents in the Sicilian campaign of George Maniaces in 1038–40. There is debate whether the Normans in Greek service actually were from Norman Italy, and it now seems likely only a few came from there. It is also unknown how many of the \"Franks\", as the Byzantines called them, were Normans and not other Frenchmen.",
            "question": "Who did the Normans encourage to come to the south?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3dbc6604f3c001a3ff3ec",
            "title": "Normans",
            "context": "Soon after the Normans began to enter Italy, they entered the Byzantine Empire and then Armenia, fighting against the Pechenegs, the Bulgars, and especially the Seljuk Turks. Norman mercenaries were first encouraged to come to the south by the Lombards to act against the Byzantines, but they soon fought in Byzantine service in Sicily. They were prominent alongside Varangian and Lombard contingents in the Sicilian campaign of George Maniaces in 1038–40. There is debate whether the Normans in Greek service actually were from Norman Italy, and it now seems likely only a few came from there. It is also unknown how many of the \"Franks\", as the Byzantines called them, were Normans and not other Frenchmen.",
            "question": "During what campaign did the Vargian and Lombard fight?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de0ffd4396321400ee258d",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "When did Herve serve as a Byzantine general?",
            "answers": {
                "text": [
                    "1050s",
                    "in the 1050s",
                    "in the 1050s"
                ],
                "answer_start": [
                    85,
                    78,
                    78
                ]
            }
        },
        {
            "id": "56de0ffd4396321400ee258e",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "When did Robert Crispin go up against the Turks?",
            "answers": {
                "text": [
                    "1060s",
                    "In the 1060s",
                    "In the 1060s"
                ],
                "answer_start": [
                    292,
                    285,
                    285
                ]
            }
        },
        {
            "id": "56de0ffd4396321400ee258f",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "Who ruined Roussel de Bailleul's plans for an independent state?",
            "answers": {
                "text": [
                    "Alexius Komnenos",
                    "Alexius Komnenos",
                    "Alexius Komnenos"
                ],
                "answer_start": [
                    522,
                    522,
                    522
                ]
            }
        },
        {
            "id": "5ad3de8b604f3c001a3ff467",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "Who was the first Byzantine mercenary to serve with the Normans?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3de8b604f3c001a3ff468",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "When did Herve serve as a Norman general?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3de8b604f3c001a3ff469",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "Who ruined Alexius Komnenos plans for an independent state?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3de8b604f3c001a3ff46a",
            "title": "Normans",
            "context": "One of the first Norman mercenaries to serve as a Byzantine general was Hervé in the 1050s. By then however, there were already Norman mercenaries serving as far away as Trebizond and Georgia. They were based at Malatya and Edessa, under the Byzantine duke of Antioch, Isaac Komnenos. In the 1060s, Robert Crispin led the Normans of Edessa against the Turks. Roussel de Bailleul even tried to carve out an independent state in Asia Minor with support from the local population, but he was stopped by the Byzantine general Alexius Komnenos.",
            "question": "When did Herve go up against the Turks?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de10b44396321400ee2593",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "What was the name of the Norman castle?",
            "answers": {
                "text": [
                    "Afranji",
                    "Afranji",
                    "Afranji"
                ],
                "answer_start": [
                    539,
                    539,
                    539
                ]
            }
        },
        {
            "id": "56de10b44396321400ee2594",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "Who was the leader when the Franks entered the Euphrates valley?",
            "answers": {
                "text": [
                    "Oursel",
                    "Oursel",
                    "Oursel"
                ],
                "answer_start": [
                    256,
                    256,
                    256
                ]
            }
        },
        {
            "id": "56de10b44396321400ee2595",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "Who did the Normans team up with in Anatolia?",
            "answers": {
                "text": [
                    "Turkish forces",
                    "Turkish forces",
                    "Turkish forces"
                ],
                "answer_start": [
                    20,
                    20,
                    20
                ]
            }
        },
        {
            "id": "5ad3e96b604f3c001a3ff689",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "Who joined Norman forces in the destruction of the Armenians?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3e96b604f3c001a3ff68a",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "Who did the Turks take up service with?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3e96b604f3c001a3ff68b",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "What Frank led Norman forces?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3e96b604f3c001a3ff68c",
            "title": "Normans",
            "context": "Some Normans joined Turkish forces to aid in the destruction of the Armenians vassal-states of Sassoun and Taron in far eastern Anatolia. Later, many took up service with the Armenian state further south in Cilicia and the Taurus Mountains. A Norman named Oursel led a force of \"Franks\" into the upper Euphrates valley in northern Syria. From 1073 to 1074, 8,000 of the 20,000 troops of the Armenian general Philaretus Brachamius were Normans—formerly of Oursel—led by Raimbaud. They even lent their ethnicity to the name of their castle: Afranji, meaning \"Franks.\" The known trade between Amalfi and Antioch and between Bari and Tarsus may be related to the presence of Italo-Normans in those cities while Amalfi and Bari were under Norman rule in Italy.",
            "question": "Where did Oursel lead the Franks?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de11154396321400ee25aa",
            "title": "Normans",
            "context": "Several families of Byzantine Greece were of Norman mercenary origin during the period of the Comnenian Restoration, when Byzantine emperors were seeking out western European warriors. The Raoulii were descended from an Italo-Norman named Raoul, the Petraliphae were descended from a Pierre d'Aulps, and that group of Albanian clans known as the Maniakates were descended from Normans who served under George Maniaces in the Sicilian expedition of 1038.",
            "question": "What were the origins of the Raouliii family?",
            "answers": {
                "text": [
                    "Norman mercenary",
                    "an Italo-Norman named Raoul",
                    "descended from an Italo-Norman named Raoul"
                ],
                "answer_start": [
                    45,
                    217,
                    202
                ]
            }
        },
        {
            "id": "5ad3ea79604f3c001a3ff6e9",
            "title": "Normans",
            "context": "Several families of Byzantine Greece were of Norman mercenary origin during the period of the Comnenian Restoration, when Byzantine emperors were seeking out western European warriors. The Raoulii were descended from an Italo-Norman named Raoul, the Petraliphae were descended from a Pierre d'Aulps, and that group of Albanian clans known as the Maniakates were descended from Normans who served under George Maniaces in the Sicilian expedition of 1038.",
            "question": "Where were several Norman mercenary familes originate from?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ea79604f3c001a3ff6ea",
            "title": "Normans",
            "context": "Several families of Byzantine Greece were of Norman mercenary origin during the period of the Comnenian Restoration, when Byzantine emperors were seeking out western European warriors. The Raoulii were descended from an Italo-Norman named Raoul, the Petraliphae were descended from a Pierre d'Aulps, and that group of Albanian clans known as the Maniakates were descended from Normans who served under George Maniaces in the Sicilian expedition of 1038.",
            "question": "Who did the Normans serve under in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ea79604f3c001a3ff6eb",
            "title": "Normans",
            "context": "Several families of Byzantine Greece were of Norman mercenary origin during the period of the Comnenian Restoration, when Byzantine emperors were seeking out western European warriors. The Raoulii were descended from an Italo-Norman named Raoul, the Petraliphae were descended from a Pierre d'Aulps, and that group of Albanian clans known as the Maniakates were descended from Normans who served under George Maniaces in the Sicilian expedition of 1038.",
            "question": "What expedition did George Maniaces lead in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de148dcffd8e1900b4b5bc",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "What was the name of the count of Apulia ",
            "answers": {
                "text": [
                    "Robert Guiscard",
                    "Robert Guiscard",
                    "Robert Guiscard"
                ],
                "answer_start": [
                    0,
                    0,
                    0
                ]
            }
        },
        {
            "id": "56de148dcffd8e1900b4b5bd",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "When did Dyrrachium  fall to the Normans?",
            "answers": {
                "text": [
                    "1082",
                    "February 1082",
                    "February 1082"
                ],
                "answer_start": [
                    1315,
                    1306,
                    1306
                ]
            }
        },
        {
            "id": "56de148dcffd8e1900b4b5be",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "How many men were in Robert's army?",
            "answers": {
                "text": [
                    "30,000",
                    "30,000",
                    "30,000"
                ],
                "answer_start": [
                    492,
                    492,
                    492
                ]
            }
        },
        {
            "id": "5ad3ed26604f3c001a3ff799",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "Who ultimatly drove the Byzantines out of Europe?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ed26604f3c001a3ff79a",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "What pope opposed Roberts campaign?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ed26604f3c001a3ff79b",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "What fell to the Normans in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ed26604f3c001a3ff79c",
            "title": "Normans",
            "context": "Robert Guiscard, an other Norman adventurer previously elevated to the dignity of count of Apulia as the result of his military successes, ultimately drove the Byzantines out of southern Italy. Having obtained the consent of pope Gregory VII and acting as his vassal, Robert continued his campaign conquering the Balkan peninsula as a foothold for western feudal lords and the Catholic Church. After allying himself with Croatia and the Catholic cities of Dalmatia, in 1081 he led an army of 30,000 men in 300 ships landing on the southern shores of Albania, capturing Valona, Kanina, Jericho (Orikumi), and reaching Butrint after numerous pillages. They joined the fleet that had previously conquered Corfu and attacked Dyrrachium from land and sea, devastating everything along the way. Under these harsh circumstances, the locals accepted the call of emperor Alexius I Comnenus to join forces with the Byzantines against the Normans. The Albanian forces could not take part in the ensuing battle because it had started before their arrival. Immediately before the battle, the Venetian fleet had secured a victory in the coast surrounding the city. Forced to retreat, Alexius ceded the command to a high Albanian official named Comiscortes in the service of Byzantium. The city's garrison resisted until February 1082, when Dyrrachium was betrayed to the Normans by the Venetian and Amalfitan merchants who had settled there. The Normans were now free to penetrate into the hinterland; they took Ioannina and some minor cities in southwestern Macedonia and Thessaly before appearing at the gates of Thessalonica. Dissension among the high ranks coerced the Normans to retreat to Italy. They lost Dyrrachium, Valona, and Butrint in 1085, after the death of Robert.",
            "question": "How many men did Roberts army face?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de15104396321400ee25b7",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "Where did the Normans and Byzantines sign the peace treaty?",
            "answers": {
                "text": [
                    "Deabolis",
                    "Deabolis",
                    "Deabolis"
                ],
                "answer_start": [
                    302,
                    718,
                    718
                ]
            }
        },
        {
            "id": "56de15104396321400ee25b8",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "Who was Robert's son?",
            "answers": {
                "text": [
                    "Bohemond",
                    "Bohemond",
                    "Bohemond"
                ],
                "answer_start": [
                    79,
                    79,
                    79
                ]
            }
        },
        {
            "id": "56de15104396321400ee25b9",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "What river was Petrela located by?",
            "answers": {
                "text": [
                    "Deabolis",
                    "the river Deabolis",
                    "Deabolis"
                ],
                "answer_start": [
                    302,
                    292,
                    302
                ]
            }
        },
        {
            "id": "5ad3ee2d604f3c001a3ff7e1",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "Who did the Normans besiege in the 11th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ee2d604f3c001a3ff7e2",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "Who did Robert lead agains Dyrrachium in 1107?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ee2d604f3c001a3ff7e3",
            "title": "Normans",
            "context": "A few years after the First Crusade, in 1107, the Normans under the command of Bohemond, Robert's son, landed in Valona and besieged Dyrrachium using the most sophisticated military equipment of the time, but to no avail. Meanwhile, they occupied Petrela, the citadel of Mili at the banks of the river Deabolis, Gllavenica (Ballsh), Kanina and Jericho. This time, the Albanians sided with the Normans, dissatisfied by the heavy taxes the Byzantines had imposed upon them. With their help, the Normans secured the Arbanon passes and opened their way to Dibra. The lack of supplies, disease and Byzantine resistance forced Bohemond to retreat from his campaign and sign a peace treaty with the Byzantines in the city of Deabolis.",
            "question": "Who was Bohemond's son?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de1563cffd8e1900b4b5c2",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "When did the Normans attack Dyrrachium?",
            "answers": {
                "text": [
                    "1185",
                    "in 1185",
                    "1185"
                ],
                "answer_start": [
                    86,
                    83,
                    86
                ]
            }
        },
        {
            "id": "56de1563cffd8e1900b4b5c3",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "What was the naval base called?",
            "answers": {
                "text": [
                    "Dyrrachium",
                    "Dyrrachium",
                    "Dyrrachium"
                ],
                "answer_start": [
                    125,
                    205,
                    205
                ]
            }
        },
        {
            "id": "56de1563cffd8e1900b4b5c4",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "Where was Dyrrachium located?",
            "answers": {
                "text": [
                    "the Adriatic",
                    "the Adriatic",
                    "Adriatic"
                ],
                "answer_start": [
                    257,
                    257,
                    261
                ]
            }
        },
        {
            "id": "5ad3f028604f3c001a3ff823",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "Who attacked Dyrrachium in the 11th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f028604f3c001a3ff824",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "Who betrayed the Normans?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f028604f3c001a3ff825",
            "title": "Normans",
            "context": "The further decline of Byzantine state-of-affairs paved the road to a third attack in 1185, when a large Norman army invaded Dyrrachium, owing to the betrayal of high Byzantine officials. Some time later, Dyrrachium—one of the most important naval bases of the Adriatic—fell again to Byzantine hands.",
            "question": "What naval base fell to the Normans?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de15dbcffd8e1900b4b5c8",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "Who did Emma Marry?",
            "answers": {
                "text": [
                    "King Ethelred II",
                    "Ethelred II",
                    "King Ethelred II"
                ],
                "answer_start": [
                    360,
                    365,
                    360
                ]
            }
        },
        {
            "id": "56de15dbcffd8e1900b4b5c9",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "Who was Emma's brother?",
            "answers": {
                "text": [
                    "Duke Richard II",
                    "Duke Richard II",
                    "Duke Richard II"
                ],
                "answer_start": [
                    327,
                    327,
                    327
                ]
            }
        },
        {
            "id": "56de15dbcffd8e1900b4b5ca",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "To where did Ethelred flee?",
            "answers": {
                "text": [
                    "Normandy",
                    "Normandy",
                    "Normandy"
                ],
                "answer_start": [
                    423,
                    423,
                    423
                ]
            }
        },
        {
            "id": "56de15dbcffd8e1900b4b5cb",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "Who kicked Ethelred out?",
            "answers": {
                "text": [
                    "Sweyn Forkbeard",
                    "Sweyn Forkbeard",
                    "Sweyn Forkbeard"
                ],
                "answer_start": [
                    480,
                    480,
                    480
                ]
            }
        },
        {
            "id": "5ad3f187604f3c001a3ff86f",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "Who married Cnut the Great?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f187604f3c001a3ff870",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "When did Richard II flee to Normandy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f187604f3c001a3ff871",
            "title": "Normans",
            "context": "The Normans were in contact with England from an early date. Not only were their original Viking brethren still ravaging the English coasts, they occupied most of the important ports opposite England across the English Channel. This relationship eventually produced closer ties of blood through the marriage of Emma, sister of Duke Richard II of Normandy, and King Ethelred II of England. Because of this, Ethelred fled to Normandy in 1013, when he was forced from his kingdom by Sweyn Forkbeard. His stay in Normandy (until 1016) influenced him and his sons by Emma, who stayed in Normandy after Cnut the Great's conquest of the isle.",
            "question": "Who's major ports were controlled by the English?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de1645cffd8e1900b4b5d0",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "Who was Edward the Confessor's half-brother?",
            "answers": {
                "text": [
                    "Harthacnut",
                    "Harthacnut",
                    "Harthacnut"
                ],
                "answer_start": [
                    115,
                    115,
                    115
                ]
            }
        },
        {
            "id": "56de1645cffd8e1900b4b5d1",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "When did Edward return?",
            "answers": {
                "text": [
                    "1041",
                    "in 1041",
                    "1041"
                ],
                "answer_start": [
                    71,
                    68,
                    71
                ]
            }
        },
        {
            "id": "56de1645cffd8e1900b4b5d2",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "Who did Edward make archbishop of Canterbury?",
            "answers": {
                "text": [
                    "Robert of Jumièges",
                    "Robert of Jumièges",
                    "Robert of Jumièges"
                ],
                "answer_start": [
                    382,
                    382,
                    382
                ]
            }
        },
        {
            "id": "5ad3f350604f3c001a3ff8ef",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "When did Edward the Confessor's son return from his fathers refuge?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f350604f3c001a3ff8f0",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "What kind of force did Harthacnut establish?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f350604f3c001a3ff8f1",
            "title": "Normans",
            "context": "When finally Edward the Confessor returned from his father's refuge in 1041, at the invitation of his half-brother Harthacnut, he brought with him a Norman-educated mind. He also brought many Norman counsellors and fighters, some of whom established an English cavalry force. This concept never really took root, but it is a typical example of the attitudes of Edward. He appointed Robert of Jumièges archbishop of Canterbury and made Ralph the Timid earl of Hereford. He invited his brother-in-law Eustace II, Count of Boulogne to his court in 1051, an event which resulted in the greatest of early conflicts between Saxon and Norman and ultimately resulted in the exile of Earl Godwin of Wessex.",
            "question": "Who made Robert of Jumieges earl of Hereford?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de16ca4396321400ee25c5",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "Where did Harold II die?",
            "answers": {
                "text": [
                    "Battle of Hastings",
                    "the Battle of Hastings",
                    "at the Battle of Hastings"
                ],
                "answer_start": [
                    85,
                    81,
                    78
                ]
            }
        },
        {
            "id": "56de16ca4396321400ee25c6",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "Who killed Harold II? ",
            "answers": {
                "text": [
                    "William II",
                    "Duke William II",
                    "Duke William II"
                ],
                "answer_start": [
                    14,
                    9,
                    9
                ]
            }
        },
        {
            "id": "56de16ca4396321400ee25c7",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "When was the Battle of Hastings?",
            "answers": {
                "text": [
                    "1066",
                    "In 1066",
                    "1066"
                ],
                "answer_start": [
                    3,
                    0,
                    3
                ]
            }
        },
        {
            "id": "56de16ca4396321400ee25c8",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "Who was the ruling class ahead of the Normans?",
            "answers": {
                "text": [
                    "Anglo-Saxons",
                    "the Anglo-Saxons",
                    "Anglo-Saxons"
                ],
                "answer_start": [
                    161,
                    157,
                    161
                ]
            }
        },
        {
            "id": "5ad3f4b1604f3c001a3ff951",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "When did King Harold II conquer England?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f4b1604f3c001a3ff952",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "What battle took place in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f4b1604f3c001a3ff953",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "Who replaced the Normans as the ruling class?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f4b1604f3c001a3ff954",
            "title": "Normans",
            "context": "In 1066, Duke William II of Normandy conquered England killing King Harold II at the Battle of Hastings. The invading Normans and their descendants replaced the Anglo-Saxons as the ruling class of England. The nobility of England were part of a single Normans culture and many had lands on both sides of the channel. Early Norman kings of England, as Dukes of Normandy, owed homage to the King of France for their land on the continent. They considered England to be their most important holding (it brought with it the title of King—an important status symbol).",
            "question": "Who considered their land on the continent their most important holding?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de1728cffd8e1900b4b5d7",
            "title": "Normans",
            "context": "Eventually, the Normans merged with the natives, combining languages and traditions. In the course of the Hundred Years' War, the Norman aristocracy often identified themselves as English. The Anglo-Norman language became distinct from the Latin language, something that was the subject of some humour by Geoffrey Chaucer. The Anglo-Norman language was eventually absorbed into the Anglo-Saxon language of their subjects (see Old English) and influenced it, helping (along with the Norse language of the earlier Anglo-Norse settlers and the Latin used by the church) in the development of Middle English. It in turn evolved into Modern English.",
            "question": "What was the Anglo-Norman language's final form?",
            "answers": {
                "text": [
                    "Modern English",
                    "Modern English",
                    "Modern English"
                ],
                "answer_start": [
                    629,
                    629,
                    629
                ]
            }
        },
        {
            "id": "5ad3f5b0604f3c001a3ff9ab",
            "title": "Normans",
            "context": "Eventually, the Normans merged with the natives, combining languages and traditions. In the course of the Hundred Years' War, the Norman aristocracy often identified themselves as English. The Anglo-Norman language became distinct from the Latin language, something that was the subject of some humour by Geoffrey Chaucer. The Anglo-Norman language was eventually absorbed into the Anglo-Saxon language of their subjects (see Old English) and influenced it, helping (along with the Norse language of the earlier Anglo-Norse settlers and the Latin used by the church) in the development of Middle English. It in turn evolved into Modern English.",
            "question": "Who identified themselves as French during the Hundred Years War?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f5b0604f3c001a3ff9ac",
            "title": "Normans",
            "context": "Eventually, the Normans merged with the natives, combining languages and traditions. In the course of the Hundred Years' War, the Norman aristocracy often identified themselves as English. The Anglo-Norman language became distinct from the Latin language, something that was the subject of some humour by Geoffrey Chaucer. The Anglo-Norman language was eventually absorbed into the Anglo-Saxon language of their subjects (see Old English) and influenced it, helping (along with the Norse language of the earlier Anglo-Norse settlers and the Latin used by the church) in the development of Middle English. It in turn evolved into Modern English.",
            "question": "What was absorbed into the Anglo-Norman language?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f5b0604f3c001a3ff9ad",
            "title": "Normans",
            "context": "Eventually, the Normans merged with the natives, combining languages and traditions. In the course of the Hundred Years' War, the Norman aristocracy often identified themselves as English. The Anglo-Norman language became distinct from the Latin language, something that was the subject of some humour by Geoffrey Chaucer. The Anglo-Norman language was eventually absorbed into the Anglo-Saxon language of their subjects (see Old English) and influenced it, helping (along with the Norse language of the earlier Anglo-Norse settlers and the Latin used by the church) in the development of Middle English. It in turn evolved into Modern English.",
            "question": "Who made fun of the Latin language?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de179dcffd8e1900b4b5da",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "In what year did the Norman's invade at Bannow Bay?",
            "answers": {
                "text": [
                    "1169",
                    "1169",
                    "1169"
                ],
                "answer_start": [
                    101,
                    101,
                    101
                ]
            }
        },
        {
            "id": "56de179dcffd8e1900b4b5db",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "What country did the Normans invade in 1169?",
            "answers": {
                "text": [
                    "Ireland",
                    "Ireland",
                    "Ireland"
                ],
                "answer_start": [
                    379,
                    379,
                    379
                ]
            }
        },
        {
            "id": "56de179dcffd8e1900b4b5dc",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "What culture did the Normans combine with in Ireland?",
            "answers": {
                "text": [
                    "Irish",
                    "Irish",
                    "Irish"
                ],
                "answer_start": [
                    37,
                    220,
                    220
                ]
            }
        },
        {
            "id": "5ad3f6f5604f3c001a3ffa09",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "Where did the Normans invade in the 11th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f6f5604f3c001a3ffa0a",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "Who did the Irish culture have a profound effect on?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f6f5604f3c001a3ffa0b",
            "title": "Normans",
            "context": "The Normans had a profound effect on Irish culture and history after their invasion at Bannow Bay in 1169. Initially the Normans maintained a distinct culture and ethnicity. Yet, with time, they came to be subsumed into Irish culture to the point that it has been said that they became \"more Irish than the Irish themselves.\" The Normans settled mostly in an area in the east of Ireland, later known as the Pale, and also built many fine castles and settlements, including Trim Castle and Dublin Castle. Both cultures intermixed, borrowing from each other's language, culture and outlook. Norman descendants today can be recognised by their surnames. Names such as French, (De) Roche, Devereux, D'Arcy, Treacy and Lacy are particularly common in the southeast of Ireland, especially in the southern part of County Wexford where the first Norman settlements were established. Other Norman names such as Furlong predominate there. Another common Norman-Irish name was Morell (Murrell) derived from the French Norman name Morel. Other names beginning with Fitz (from the Norman for son) indicate Norman ancestry. These included Fitzgerald, FitzGibbons (Gibbons) dynasty, Fitzmaurice. Other families bearing such surnames as Barry (de Barra) and De Búrca (Burke) are also of Norman extraction.",
            "question": "What castles were built by the Irish?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de17f9cffd8e1900b4b5e0",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who was Margaret's brother?",
            "answers": {
                "text": [
                    "Edgar",
                    "Edgar",
                    "Edgar Atheling"
                ],
                "answer_start": [
                    75,
                    157,
                    75
                ]
            }
        },
        {
            "id": "56de17f9cffd8e1900b4b5e1",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who was Margaret's husband?",
            "answers": {
                "text": [
                    "King Malcolm III of Scotland",
                    "King Malcolm III",
                    "King Malcolm III"
                ],
                "answer_start": [
                    120,
                    120,
                    120
                ]
            }
        },
        {
            "id": "56de17f9cffd8e1900b4b5e2",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "When was Scotland invaded by William?",
            "answers": {
                "text": [
                    "1072",
                    "1072",
                    "1072"
                ],
                "answer_start": [
                    300,
                    300,
                    300
                ]
            }
        },
        {
            "id": "56de17f9cffd8e1900b4b5e3",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who was the hostage?",
            "answers": {
                "text": [
                    "Duncan",
                    "Duncan",
                    "Duncan"
                ],
                "answer_start": [
                    440,
                    440,
                    440
                ]
            }
        },
        {
            "id": "5ad3f7ac604f3c001a3ffa3b",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who did Edgar marry?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f7ac604f3c001a3ffa3c",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who invaded Scotland in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f7ac604f3c001a3ffa3d",
            "title": "Normans",
            "context": "One of the claimants of the English throne opposing William the Conqueror, Edgar Atheling, eventually fled to Scotland. King Malcolm III of Scotland married Edgar's sister Margaret, and came into opposition to William who had already disputed Scotland's southern borders. William invaded Scotland in 1072, riding as far as Abernethy where he met up with his fleet of ships. Malcolm submitted, paid homage to William and surrendered his son Duncan as a hostage, beginning a series of arguments as to whether the Scottish Crown owed allegiance to the King of England.",
            "question": "Who did the Scotish king take hostage?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3cd0cffd8e1900b4b6be",
            "title": "Normans",
            "context": "Normans came into Scotland, building castles and founding noble families who would provide some future kings, such as Robert the Bruce, as well as founding a considerable number of the Scottish clans. King David I of Scotland, whose elder brother Alexander I had married Sybilla of Normandy, was instrumental in introducing Normans and Norman culture to Scotland, part of the process some scholars call the \"Davidian Revolution\". Having spent time at the court of Henry I of England (married to David's sister Maud of Scotland), and needing them to wrestle the kingdom from his half-brother Máel Coluim mac Alaxandair, David had to reward many with lands. The process was continued under David's successors, most intensely of all under William the Lion. The Norman-derived feudal system was applied in varying degrees to most of Scotland. Scottish families of the names Bruce, Gray, Ramsay, Fraser, Ogilvie, Montgomery, Sinclair, Pollock, Burnard, Douglas and Gordon to name but a few, and including the later royal House of Stewart, can all be traced back to Norman ancestry.",
            "question": "Who did Alexander I marry?",
            "answers": {
                "text": [
                    "Sybilla of Normandy",
                    "Sybilla of Normandy",
                    "Sybilla"
                ],
                "answer_start": [
                    271,
                    271,
                    271
                ]
            }
        },
        {
            "id": "56de3cd0cffd8e1900b4b6bf",
            "title": "Normans",
            "context": "Normans came into Scotland, building castles and founding noble families who would provide some future kings, such as Robert the Bruce, as well as founding a considerable number of the Scottish clans. King David I of Scotland, whose elder brother Alexander I had married Sybilla of Normandy, was instrumental in introducing Normans and Norman culture to Scotland, part of the process some scholars call the \"Davidian Revolution\". Having spent time at the court of Henry I of England (married to David's sister Maud of Scotland), and needing them to wrestle the kingdom from his half-brother Máel Coluim mac Alaxandair, David had to reward many with lands. The process was continued under David's successors, most intensely of all under William the Lion. The Norman-derived feudal system was applied in varying degrees to most of Scotland. Scottish families of the names Bruce, Gray, Ramsay, Fraser, Ogilvie, Montgomery, Sinclair, Pollock, Burnard, Douglas and Gordon to name but a few, and including the later royal House of Stewart, can all be traced back to Norman ancestry.",
            "question": "What culture's arrival in Scotland is know as the \"Davidian Revolution\"?",
            "answers": {
                "text": [
                    "Norman",
                    "Norman",
                    "Norman"
                ],
                "answer_start": [
                    336,
                    336,
                    336
                ]
            }
        },
        {
            "id": "5ad3f8d2604f3c001a3ffa8d",
            "title": "Normans",
            "context": "Normans came into Scotland, building castles and founding noble families who would provide some future kings, such as Robert the Bruce, as well as founding a considerable number of the Scottish clans. King David I of Scotland, whose elder brother Alexander I had married Sybilla of Normandy, was instrumental in introducing Normans and Norman culture to Scotland, part of the process some scholars call the \"Davidian Revolution\". Having spent time at the court of Henry I of England (married to David's sister Maud of Scotland), and needing them to wrestle the kingdom from his half-brother Máel Coluim mac Alaxandair, David had to reward many with lands. The process was continued under David's successors, most intensely of all under William the Lion. The Norman-derived feudal system was applied in varying degrees to most of Scotland. Scottish families of the names Bruce, Gray, Ramsay, Fraser, Ogilvie, Montgomery, Sinclair, Pollock, Burnard, Douglas and Gordon to name but a few, and including the later royal House of Stewart, can all be traced back to Norman ancestry.",
            "question": "Who did King David I of Scotland Marry?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3f8d2604f3c001a3ffa8e",
            "title": "Normans",
            "context": "Normans came into Scotland, building castles and founding noble families who would provide some future kings, such as Robert the Bruce, as well as founding a considerable number of the Scottish clans. King David I of Scotland, whose elder brother Alexander I had married Sybilla of Normandy, was instrumental in introducing Normans and Norman culture to Scotland, part of the process some scholars call the \"Davidian Revolution\". Having spent time at the court of Henry I of England (married to David's sister Maud of Scotland), and needing them to wrestle the kingdom from his half-brother Máel Coluim mac Alaxandair, David had to reward many with lands. The process was continued under David's successors, most intensely of all under William the Lion. The Norman-derived feudal system was applied in varying degrees to most of Scotland. Scottish families of the names Bruce, Gray, Ramsay, Fraser, Ogilvie, Montgomery, Sinclair, Pollock, Burnard, Douglas and Gordon to name but a few, and including the later royal House of Stewart, can all be traced back to Norman ancestry.",
            "question": "What did Sybilla of Normandy introduce to Scotland?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3d594396321400ee26ca",
            "title": "Normans",
            "context": "Even before the Norman Conquest of England, the Normans had come into contact with Wales. Edward the Confessor had set up the aforementioned Ralph as earl of Hereford and charged him with defending the Marches and warring with the Welsh. In these original ventures, the Normans failed to make any headway into Wales.",
            "question": "Where was Ralph earl of?",
            "answers": {
                "text": [
                    "Hereford",
                    "Hereford",
                    "Hereford"
                ],
                "answer_start": [
                    158,
                    158,
                    158
                ]
            }
        },
        {
            "id": "56de3d594396321400ee26cb",
            "title": "Normans",
            "context": "Even before the Norman Conquest of England, the Normans had come into contact with Wales. Edward the Confessor had set up the aforementioned Ralph as earl of Hereford and charged him with defending the Marches and warring with the Welsh. In these original ventures, the Normans failed to make any headway into Wales.",
            "question": "Who was Ralph in charge of being at war with?",
            "answers": {
                "text": [
                    "the Welsh",
                    "the Welsh",
                    "the Welsh"
                ],
                "answer_start": [
                    227,
                    227,
                    227
                ]
            }
        },
        {
            "id": "56de3d594396321400ee26cc",
            "title": "Normans",
            "context": "Even before the Norman Conquest of England, the Normans had come into contact with Wales. Edward the Confessor had set up the aforementioned Ralph as earl of Hereford and charged him with defending the Marches and warring with the Welsh. In these original ventures, the Normans failed to make any headway into Wales.",
            "question": "Who made Ralph earl?",
            "answers": {
                "text": [
                    "Edward the Confessor",
                    "Edward the Confessor",
                    "Edward the Confessor"
                ],
                "answer_start": [
                    90,
                    90,
                    90
                ]
            }
        },
        {
            "id": "5ad3fb01604f3c001a3ffb35",
            "title": "Normans",
            "context": "Even before the Norman Conquest of England, the Normans had come into contact with Wales. Edward the Confessor had set up the aforementioned Ralph as earl of Hereford and charged him with defending the Marches and warring with the Welsh. In these original ventures, the Normans failed to make any headway into Wales.",
            "question": "Who came into contact with Wales after the conquest of England?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fb01604f3c001a3ffb36",
            "title": "Normans",
            "context": "Even before the Norman Conquest of England, the Normans had come into contact with Wales. Edward the Confessor had set up the aforementioned Ralph as earl of Hereford and charged him with defending the Marches and warring with the Welsh. In these original ventures, the Normans failed to make any headway into Wales.",
            "question": "Who made Edward the Confessor Earl?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3dbacffd8e1900b4b6d2",
            "title": "Normans",
            "context": "Subsequent to the Conquest, however, the Marches came completely under the dominance of William's most trusted Norman barons, including Bernard de Neufmarché, Roger of Montgomery in Shropshire and Hugh Lupus in Cheshire. These Normans began a long period of slow conquest during which almost all of Wales was at some point subject to Norman interference. Norman words, such as baron (barwn), first entered Welsh at that time.",
            "question": "What country was under the control of Norman barons?",
            "answers": {
                "text": [
                    "Wales",
                    "Wales",
                    "Wales"
                ],
                "answer_start": [
                    299,
                    299,
                    299
                ]
            }
        },
        {
            "id": "5ad3fb6e604f3c001a3ffb5f",
            "title": "Normans",
            "context": "Subsequent to the Conquest, however, the Marches came completely under the dominance of William's most trusted Norman barons, including Bernard de Neufmarché, Roger of Montgomery in Shropshire and Hugh Lupus in Cheshire. These Normans began a long period of slow conquest during which almost all of Wales was at some point subject to Norman interference. Norman words, such as baron (barwn), first entered Welsh at that time.",
            "question": "What came under Williams dominace before the conquest?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fb6e604f3c001a3ffb60",
            "title": "Normans",
            "context": "Subsequent to the Conquest, however, the Marches came completely under the dominance of William's most trusted Norman barons, including Bernard de Neufmarché, Roger of Montgomery in Shropshire and Hugh Lupus in Cheshire. These Normans began a long period of slow conquest during which almost all of Wales was at some point subject to Norman interference. Norman words, such as baron (barwn), first entered Welsh at that time.",
            "question": "What Welsh lords did William conquer?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3e414396321400ee26d8",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "What year did Roger de Tosny fail to accomplish what he set out to do?",
            "answers": {
                "text": [
                    "1018",
                    "1064",
                    "1018"
                ],
                "answer_start": [
                    221,
                    345,
                    221
                ]
            }
        },
        {
            "id": "56de3e414396321400ee26d9",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "Who was in charge of the papal army in the War of Barbastro?",
            "answers": {
                "text": [
                    "William of Montreuil",
                    "William of Montreuil",
                    "William of Montreuil"
                ],
                "answer_start": [
                    380,
                    380,
                    380
                ]
            }
        },
        {
            "id": "5ad3fc41604f3c001a3ffb8f",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "Where did the Normans carve out a principality before the First Crusade?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fc41604f3c001a3ffb90",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "What did the Normans take part in in the 10th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fc41604f3c001a3ffb91",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "Who carved out a state for himself from Moorish lands?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fc41604f3c001a3ffb92",
            "title": "Normans",
            "context": "The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.",
            "question": "What war occured in the 1oth century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3ebc4396321400ee26e6",
            "title": "Normans",
            "context": "In 1096, Crusaders passing by the siege of Amalfi were joined by Bohemond of Taranto and his nephew Tancred with an army of Italo-Normans. Bohemond was the de facto leader of the Crusade during its passage through Asia Minor. After the successful Siege of Antioch in 1097, Bohemond began carving out an independent principality around that city. Tancred was instrumental in the conquest of Jerusalem and he worked for the expansion of the Crusader kingdom in Transjordan and the region of Galilee.[citation needed]",
            "question": "When did the Siege of Antioch take place?",
            "answers": {
                "text": [
                    "1097",
                    "1097",
                    "1097"
                ],
                "answer_start": [
                    267,
                    267,
                    267
                ]
            }
        },
        {
            "id": "56de3ebc4396321400ee26e7",
            "title": "Normans",
            "context": "In 1096, Crusaders passing by the siege of Amalfi were joined by Bohemond of Taranto and his nephew Tancred with an army of Italo-Normans. Bohemond was the de facto leader of the Crusade during its passage through Asia Minor. After the successful Siege of Antioch in 1097, Bohemond began carving out an independent principality around that city. Tancred was instrumental in the conquest of Jerusalem and he worked for the expansion of the Crusader kingdom in Transjordan and the region of Galilee.[citation needed]",
            "question": "What was the name of Bohemond's nephew?",
            "answers": {
                "text": [
                    "Tancred",
                    "Tancred",
                    "Tancred"
                ],
                "answer_start": [
                    100,
                    100,
                    100
                ]
            }
        },
        {
            "id": "56de3ebc4396321400ee26e8",
            "title": "Normans",
            "context": "In 1096, Crusaders passing by the siege of Amalfi were joined by Bohemond of Taranto and his nephew Tancred with an army of Italo-Normans. Bohemond was the de facto leader of the Crusade during its passage through Asia Minor. After the successful Siege of Antioch in 1097, Bohemond began carving out an independent principality around that city. Tancred was instrumental in the conquest of Jerusalem and he worked for the expansion of the Crusader kingdom in Transjordan and the region of Galilee.[citation needed]",
            "question": "What major conquest did Tancred play a roll in?",
            "answers": {
                "text": [
                    "Jerusalem",
                    "Jerusalem",
                    "Jerusalem"
                ],
                "answer_start": [
                    390,
                    390,
                    390
                ]
            }
        },
        {
            "id": "5ad4017a604f3c001a3ffd1f",
            "title": "Normans",
            "context": "In 1096, Crusaders passing by the siege of Amalfi were joined by Bohemond of Taranto and his nephew Tancred with an army of Italo-Normans. Bohemond was the de facto leader of the Crusade during its passage through Asia Minor. After the successful Siege of Antioch in 1097, Bohemond began carving out an independent principality around that city. Tancred was instrumental in the conquest of Jerusalem and he worked for the expansion of the Crusader kingdom in Transjordan and the region of Galilee.[citation needed]",
            "question": "When did Tancred lay siege to Antioch?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad4017a604f3c001a3ffd20",
            "title": "Normans",
            "context": "In 1096, Crusaders passing by the siege of Amalfi were joined by Bohemond of Taranto and his nephew Tancred with an army of Italo-Normans. Bohemond was the de facto leader of the Crusade during its passage through Asia Minor. After the successful Siege of Antioch in 1097, Bohemond began carving out an independent principality around that city. Tancred was instrumental in the conquest of Jerusalem and he worked for the expansion of the Crusader kingdom in Transjordan and the region of Galilee.[citation needed]",
            "question": "What was the name of Tancred's nephew?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3efccffd8e1900b4b6fe",
            "title": "Normans",
            "context": "The conquest of Cyprus by the Anglo-Norman forces of the Third Crusade opened a new chapter in the history of the island, which would be under Western European domination for the following 380 years. Although not part of a planned operation, the conquest had much more permanent results than initially expected.",
            "question": "How long did Western Europe control Cyprus?",
            "answers": {
                "text": [
                    "380 years",
                    "380 years",
                    "380 years"
                ],
                "answer_start": [
                    189,
                    189,
                    189
                ]
            }
        },
        {
            "id": "5ad401f2604f3c001a3ffd41",
            "title": "Normans",
            "context": "The conquest of Cyprus by the Anglo-Norman forces of the Third Crusade opened a new chapter in the history of the island, which would be under Western European domination for the following 380 years. Although not part of a planned operation, the conquest had much more permanent results than initially expected.",
            "question": "Who defeated Anglo-Norman forces during the third Crusade?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad401f2604f3c001a3ffd42",
            "title": "Normans",
            "context": "The conquest of Cyprus by the Anglo-Norman forces of the Third Crusade opened a new chapter in the history of the island, which would be under Western European domination for the following 380 years. Although not part of a planned operation, the conquest had much more permanent results than initially expected.",
            "question": "Who dominated Western Europe for 380 years?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de3f784396321400ee26fa",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "What ruined Richard's plans to reach Acre?",
            "answers": {
                "text": [
                    "a storm",
                    "a storm",
                    "a storm"
                ],
                "answer_start": [
                    99,
                    99,
                    99
                ]
            }
        },
        {
            "id": "56de3f784396321400ee26fb",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "Who was Richard's fiancee?",
            "answers": {
                "text": [
                    "Berengaria",
                    "Berengaria",
                    "Berengaria"
                ],
                "answer_start": [
                    218,
                    218,
                    218
                ]
            }
        },
        {
            "id": "56de3f784396321400ee26fc",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "What year did the storm hit Richard's fleet?",
            "answers": {
                "text": [
                    "1191",
                    "1191",
                    "1191"
                ],
                "answer_start": [
                    9,
                    9,
                    9
                ]
            }
        },
        {
            "id": "56de3f784396321400ee26fd",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "Who ruled Cyprus in 1191?",
            "answers": {
                "text": [
                    "Isaac Komnenos",
                    "Isaac",
                    "Isaac Komnenos"
                ],
                "answer_start": [
                    421,
                    522,
                    421
                ]
            }
        },
        {
            "id": "5ad40280604f3c001a3ffd57",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "Who left Messina in the 11th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad40280604f3c001a3ffd58",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "What year did Richards fleet avoid a storm?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad40280604f3c001a3ffd59",
            "title": "Normans",
            "context": "In April 1191 Richard the Lion-hearted left Messina with a large fleet in order to reach Acre. But a storm dispersed the fleet. After some searching, it was discovered that the boat carrying his sister and his fiancée Berengaria was anchored on the south coast of Cyprus, together with the wrecks of several other ships, including the treasure ship. Survivors of the wrecks had been taken prisoner by the island's despot Isaac Komnenos. On 1 May 1191, Richard's fleet arrived in the port of Limassol on Cyprus. He ordered Isaac to release the prisoners and the treasure. Isaac refused, so Richard landed his troops and took Limassol.",
            "question": "Who ruled Cyprus in the 11th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de40da4396321400ee2708",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "Who was Guy's Rival?",
            "answers": {
                "text": [
                    "Conrad of Montferrat",
                    "Conrad of Montferrat",
                    "Conrad of Montferrat"
                ],
                "answer_start": [
                    188,
                    188,
                    188
                ]
            }
        },
        {
            "id": "56de40da4396321400ee2709",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "What were Isaac's chains made out of?",
            "answers": {
                "text": [
                    "silver",
                    "silver",
                    "silver"
                ],
                "answer_start": [
                    565,
                    565,
                    565
                ]
            }
        },
        {
            "id": "56de40da4396321400ee270a",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "Who led Richard's troops when Cyprus was conquered?",
            "answers": {
                "text": [
                    "Guy de Lusignan",
                    "Guy de Lusignan",
                    "Guy de Lusignan"
                ],
                "answer_start": [
                    85,
                    508,
                    508
                ]
            }
        },
        {
            "id": "5ad404a6604f3c001a3ffde1",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "Who's chains were made out of copper?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad404a6604f3c001a3ffde2",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "Who led Issacs troops to Cyprus?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad404a6604f3c001a3ffde3",
            "title": "Normans",
            "context": "Various princes of the Holy Land arrived in Limassol at the same time, in particular Guy de Lusignan. All declared their support for Richard provided that he support Guy against his rival Conrad of Montferrat. The local barons abandoned Isaac, who considered making peace with Richard, joining him on the crusade, and offering his daughter in marriage to the person named by Richard. But Isaac changed his mind and tried to escape. Richard then proceeded to conquer the whole island, his troops being led by Guy de Lusignan. Isaac surrendered and was confined with silver chains, because Richard had promised that he would not place him in irons. By 1 June, Richard had conquered the whole island. His exploit was well publicized and contributed to his reputation; he also derived significant financial gains from the conquest of the island. Richard left for Acre on 5 June, with his allies. Before his departure, he named two of his Norman generals, Richard de Camville and Robert de Thornham, as governors of Cyprus.",
            "question": "Who offered Issac his daughter?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de49564396321400ee277a",
            "title": "Normans",
            "context": "Between 1402 and 1405, the expedition led by the Norman noble Jean de Bethencourt and the Poitevine Gadifer de la Salle conquered the Canarian islands of Lanzarote, Fuerteventura and El Hierro off the Atlantic coast of Africa. Their troops were gathered in Normandy, Gascony and were later reinforced by Castilian colonists.",
            "question": "What continent are the Canarian Islands off the coast of?",
            "answers": {
                "text": [
                    "Africa",
                    "Africa",
                    "Africa"
                ],
                "answer_start": [
                    219,
                    219,
                    219
                ]
            }
        },
        {
            "id": "5ad40419604f3c001a3ffdb7",
            "title": "Normans",
            "context": "Between 1402 and 1405, the expedition led by the Norman noble Jean de Bethencourt and the Poitevine Gadifer de la Salle conquered the Canarian islands of Lanzarote, Fuerteventura and El Hierro off the Atlantic coast of Africa. Their troops were gathered in Normandy, Gascony and were later reinforced by Castilian colonists.",
            "question": "Who conquered the Canary Island in the 14th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad40419604f3c001a3ffdb8",
            "title": "Normans",
            "context": "Between 1402 and 1405, the expedition led by the Norman noble Jean de Bethencourt and the Poitevine Gadifer de la Salle conquered the Canarian islands of Lanzarote, Fuerteventura and El Hierro off the Atlantic coast of Africa. Their troops were gathered in Normandy, Gascony and were later reinforced by Castilian colonists.",
            "question": "What Islands are of the coast of Asia?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de49a8cffd8e1900b4b7a7",
            "title": "Normans",
            "context": "Bethencourt took the title of King of the Canary Islands, as vassal to Henry III of Castile. In 1418, Jean's nephew Maciot de Bethencourt sold the rights to the islands to Enrique Pérez de Guzmán, 2nd Count de Niebla.",
            "question": "Who became the King of the Canary Islands?",
            "answers": {
                "text": [
                    "Bethencourt",
                    "Bethencourt",
                    "Bethencourt"
                ],
                "answer_start": [
                    0,
                    0,
                    0
                ]
            }
        },
        {
            "id": "56de49a8cffd8e1900b4b7a8",
            "title": "Normans",
            "context": "Bethencourt took the title of King of the Canary Islands, as vassal to Henry III of Castile. In 1418, Jean's nephew Maciot de Bethencourt sold the rights to the islands to Enrique Pérez de Guzmán, 2nd Count de Niebla.",
            "question": "Who bought the rights?",
            "answers": {
                "text": [
                    "Enrique Pérez de Guzmán",
                    "Enrique Pérez de Guzmán",
                    "Enrique Pérez de Guzmán"
                ],
                "answer_start": [
                    172,
                    172,
                    172
                ]
            }
        },
        {
            "id": "56de49a8cffd8e1900b4b7a9",
            "title": "Normans",
            "context": "Bethencourt took the title of King of the Canary Islands, as vassal to Henry III of Castile. In 1418, Jean's nephew Maciot de Bethencourt sold the rights to the islands to Enrique Pérez de Guzmán, 2nd Count de Niebla.",
            "question": "Who sold the rights?",
            "answers": {
                "text": [
                    "Maciot de Bethencourt",
                    "Maciot de Bethencourt",
                    "Maciot de Bethencourt"
                ],
                "answer_start": [
                    116,
                    116,
                    116
                ]
            }
        },
        {
            "id": "5ad403c1604f3c001a3ffd97",
            "title": "Normans",
            "context": "Bethencourt took the title of King of the Canary Islands, as vassal to Henry III of Castile. In 1418, Jean's nephew Maciot de Bethencourt sold the rights to the islands to Enrique Pérez de Guzmán, 2nd Count de Niebla.",
            "question": "What title did Henry II take in the Canary Island?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad403c1604f3c001a3ffd98",
            "title": "Normans",
            "context": "Bethencourt took the title of King of the Canary Islands, as vassal to Henry III of Castile. In 1418, Jean's nephew Maciot de Bethencourt sold the rights to the islands to Enrique Pérez de Guzmán, 2nd Count de Niebla.",
            "question": "Who sold the rights to the island in the 14th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4a474396321400ee2786",
            "title": "Normans",
            "context": "The customary law of Normandy was developed between the 10th and 13th centuries and survives today through the legal systems of Jersey and Guernsey in the Channel Islands. Norman customary law was transcribed in two customaries in Latin by two judges for use by them and their colleagues: These are the Très ancien coutumier (Very ancient customary), authored between 1200 and 1245; and the Grand coutumier de Normandie (Great customary of Normandy, originally Summa de legibus Normanniae in curia laïcali), authored between 1235 and 1245.",
            "question": "Where are Jersey and Guernsey",
            "answers": {
                "text": [
                    "Channel Islands",
                    "the Channel Islands",
                    "the Channel Islands"
                ],
                "answer_start": [
                    155,
                    151,
                    151
                ]
            }
        },
        {
            "id": "56de4a474396321400ee2787",
            "title": "Normans",
            "context": "The customary law of Normandy was developed between the 10th and 13th centuries and survives today through the legal systems of Jersey and Guernsey in the Channel Islands. Norman customary law was transcribed in two customaries in Latin by two judges for use by them and their colleagues: These are the Très ancien coutumier (Very ancient customary), authored between 1200 and 1245; and the Grand coutumier de Normandie (Great customary of Normandy, originally Summa de legibus Normanniae in curia laïcali), authored between 1235 and 1245.",
            "question": "How many customaries does Norman customary law have?",
            "answers": {
                "text": [
                    "two",
                    "two",
                    "two"
                ],
                "answer_start": [
                    212,
                    212,
                    212
                ]
            }
        },
        {
            "id": "5ad40358604f3c001a3ffd7d",
            "title": "Normans",
            "context": "The customary law of Normandy was developed between the 10th and 13th centuries and survives today through the legal systems of Jersey and Guernsey in the Channel Islands. Norman customary law was transcribed in two customaries in Latin by two judges for use by them and their colleagues: These are the Très ancien coutumier (Very ancient customary), authored between 1200 and 1245; and the Grand coutumier de Normandie (Great customary of Normandy, originally Summa de legibus Normanniae in curia laïcali), authored between 1235 and 1245.",
            "question": "What Norman law wasdeveloped between 1000 and 1300?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad40358604f3c001a3ffd7e",
            "title": "Normans",
            "context": "The customary law of Normandy was developed between the 10th and 13th centuries and survives today through the legal systems of Jersey and Guernsey in the Channel Islands. Norman customary law was transcribed in two customaries in Latin by two judges for use by them and their colleagues: These are the Très ancien coutumier (Very ancient customary), authored between 1200 and 1245; and the Grand coutumier de Normandie (Great customary of Normandy, originally Summa de legibus Normanniae in curia laïcali), authored between 1235 and 1245.",
            "question": "What law has 3 customeries?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad40358604f3c001a3ffd7f",
            "title": "Normans",
            "context": "The customary law of Normandy was developed between the 10th and 13th centuries and survives today through the legal systems of Jersey and Guernsey in the Channel Islands. Norman customary law was transcribed in two customaries in Latin by two judges for use by them and their colleagues: These are the Très ancien coutumier (Very ancient customary), authored between 1200 and 1245; and the Grand coutumier de Normandie (Great customary of Normandy, originally Summa de legibus Normanniae in curia laïcali), authored between 1235 and 1245.",
            "question": "What was authored in the 12th century?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4a89cffd8e1900b4b7bd",
            "title": "Normans",
            "context": "Norman architecture typically stands out as a new stage in the architectural history of the regions they subdued. They spread a unique Romanesque idiom to England and Italy, and the encastellation of these regions with keeps in their north French style fundamentally altered the military landscape. Their style was characterised by rounded arches, particularly over windows and doorways, and massive proportions.",
            "question": "What is the Norman architecture idiom?",
            "answers": {
                "text": [
                    "Romanesque",
                    "Romanesque",
                    "Romanesque"
                ],
                "answer_start": [
                    135,
                    135,
                    135
                ]
            }
        },
        {
            "id": "56de4a89cffd8e1900b4b7be",
            "title": "Normans",
            "context": "Norman architecture typically stands out as a new stage in the architectural history of the regions they subdued. They spread a unique Romanesque idiom to England and Italy, and the encastellation of these regions with keeps in their north French style fundamentally altered the military landscape. Their style was characterised by rounded arches, particularly over windows and doorways, and massive proportions.",
            "question": "What kind of arches does Norman architecture have?",
            "answers": {
                "text": [
                    "rounded",
                    "rounded",
                    "rounded"
                ],
                "answer_start": [
                    332,
                    332,
                    332
                ]
            }
        },
        {
            "id": "5ad402ce604f3c001a3ffd67",
            "title": "Normans",
            "context": "Norman architecture typically stands out as a new stage in the architectural history of the regions they subdued. They spread a unique Romanesque idiom to England and Italy, and the encastellation of these regions with keeps in their north French style fundamentally altered the military landscape. Their style was characterised by rounded arches, particularly over windows and doorways, and massive proportions.",
            "question": "What type of arch did the Normans invent?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4b074396321400ee2793",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "What architecture type came after Norman in England?",
            "answers": {
                "text": [
                    "Early Gothic",
                    "Early Gothic",
                    "Early Gothic"
                ],
                "answer_start": [
                    108,
                    108,
                    108
                ]
            }
        },
        {
            "id": "56de4b074396321400ee2794",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "What architecture type came before Norman in England?",
            "answers": {
                "text": [
                    "Anglo-Saxon",
                    "Anglo-Saxon",
                    "Anglo-Saxon"
                ],
                "answer_start": [
                    79,
                    79,
                    79
                ]
            }
        },
        {
            "id": "56de4b074396321400ee2795",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "What place had the Norman Arab architectural style?",
            "answers": {
                "text": [
                    "Sicily",
                    "Sicily",
                    "Kingdom of Sicily"
                ],
                "answer_start": [
                    328,
                    328,
                    317
                ]
            }
        },
        {
            "id": "5ad400b0604f3c001a3ffcdf",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "What precedes the period of Anglo-Saxon architecture?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad400b0604f3c001a3ffce0",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "What architecture type came after Early Gothic?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad400b0604f3c001a3ffce1",
            "title": "Normans",
            "context": "In England, the period of Norman architecture immediately succeeds that of the Anglo-Saxon and precedes the Early Gothic. In southern Italy, the Normans incorporated elements of Islamic, Lombard, and Byzantine building techniques into their own, initiating a unique style known as Norman-Arab architecture within the Kingdom of Sicily.",
            "question": "Who incorperated Islamic, LOmbard, and Byzantine building techniques in England?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4b5c4396321400ee2799",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "When did the church reform begin?",
            "answers": {
                "text": [
                    "early 11th century",
                    "11th century",
                    "in the early 11th century"
                ],
                "answer_start": [
                    129,
                    135,
                    122
                ]
            }
        },
        {
            "id": "56de4b5c4396321400ee279a",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "Who used the church to unify themselves?",
            "answers": {
                "text": [
                    "dukes",
                    "the dukes",
                    "dukes"
                ],
                "answer_start": [
                    152,
                    422,
                    426
                ]
            }
        },
        {
            "id": "5ad3ffd7604f3c001a3ffca7",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "What kind of art did the Normans have a rich tradition of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ffd7604f3c001a3ffca8",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "Who began a program of church reform in the 1100s",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ffd7604f3c001a3ffca9",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "Who was divided by the church?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ffd7604f3c001a3ffcaa",
            "title": "Normans",
            "context": "In the visual arts, the Normans did not have the rich and distinctive traditions of the cultures they conquered. However, in the early 11th century the dukes began a programme of church reform, encouraging the Cluniac reform of monasteries and patronising intellectual pursuits, especially the proliferation of scriptoria and the reconstitution of a compilation of lost illuminated manuscripts. The church was utilised by the dukes as a unifying force for their disparate duchy. The chief monasteries taking part in this \"renaissance\" of Norman art and scholarship were Mont-Saint-Michel, Fécamp, Jumièges, Bec, Saint-Ouen, Saint-Evroul, and Saint-Wandrille. These centres were in contact with the so-called \"Winchester school\", which channeled a pure Carolingian artistic tradition to Normandy. In the final decade of the 11th and first of the 12th century, Normandy experienced a golden age of illustrated manuscripts, but it was brief and the major scriptoria of Normandy ceased to function after the midpoint of the century.",
            "question": "Who experienced aa golden age in the 1100s and 1200s",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4bb84396321400ee27a2",
            "title": "Normans",
            "context": "The French Wars of Religion in the 16th century and French Revolution in the 18th successively destroyed much of what existed in the way of the architectural and artistic remnant of this Norman creativity. The former, with their violence, caused the wanton destruction of many Norman edifices; the latter, with its assault on religion, caused the purposeful destruction of religious objects of any type, and its destabilisation of society resulted in rampant pillaging.",
            "question": "When were the French wars of religion?",
            "answers": {
                "text": [
                    "16th century",
                    "the 16th century",
                    "in the 16th century"
                ],
                "answer_start": [
                    35,
                    31,
                    28
                ]
            }
        },
        {
            "id": "5ad3ff1b604f3c001a3ffc73",
            "title": "Normans",
            "context": "The French Wars of Religion in the 16th century and French Revolution in the 18th successively destroyed much of what existed in the way of the architectural and artistic remnant of this Norman creativity. The former, with their violence, caused the wanton destruction of many Norman edifices; the latter, with its assault on religion, caused the purposeful destruction of religious objects of any type, and its destabilisation of society resulted in rampant pillaging.",
            "question": "What wars did France fight in the 1600s?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3ff1b604f3c001a3ffc74",
            "title": "Normans",
            "context": "The French Wars of Religion in the 16th century and French Revolution in the 18th successively destroyed much of what existed in the way of the architectural and artistic remnant of this Norman creativity. The former, with their violence, caused the wanton destruction of many Norman edifices; the latter, with its assault on religion, caused the purposeful destruction of religious objects of any type, and its destabilisation of society resulted in rampant pillaging.",
            "question": "What revolution was fought in the 1899's?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de4c324396321400ee27ab",
            "title": "Normans",
            "context": "By far the most famous work of Norman art is the Bayeux Tapestry, which is not a tapestry but a work of embroidery. It was commissioned by Odo, the Bishop of Bayeux and first Earl of Kent, employing natives from Kent who were learned in the Nordic traditions imported in the previous half century by the Danish Vikings.",
            "question": "What kind of needlework was used in the creation of the Bayeux Tapestry?",
            "answers": {
                "text": [
                    "embroidery",
                    "embroidery",
                    "embroidery"
                ],
                "answer_start": [
                    104,
                    104,
                    104
                ]
            }
        },
        {
            "id": "56de4c324396321400ee27ac",
            "title": "Normans",
            "context": "By far the most famous work of Norman art is the Bayeux Tapestry, which is not a tapestry but a work of embroidery. It was commissioned by Odo, the Bishop of Bayeux and first Earl of Kent, employing natives from Kent who were learned in the Nordic traditions imported in the previous half century by the Danish Vikings.",
            "question": "What is Norman art's most well known piece?",
            "answers": {
                "text": [
                    "Bayeux Tapestry",
                    "the Bayeux Tapestry",
                    "the Bayeux Tapestry"
                ],
                "answer_start": [
                    49,
                    45,
                    45
                ]
            }
        },
        {
            "id": "56de4c324396321400ee27ad",
            "title": "Normans",
            "context": "By far the most famous work of Norman art is the Bayeux Tapestry, which is not a tapestry but a work of embroidery. It was commissioned by Odo, the Bishop of Bayeux and first Earl of Kent, employing natives from Kent who were learned in the Nordic traditions imported in the previous half century by the Danish Vikings.",
            "question": "Who commissioned the Tapestry?",
            "answers": {
                "text": [
                    "Odo",
                    "Odo",
                    "Odo"
                ],
                "answer_start": [
                    139,
                    139,
                    139
                ]
            }
        },
        {
            "id": "5ad3fe91604f3c001a3ffc47",
            "title": "Normans",
            "context": "By far the most famous work of Norman art is the Bayeux Tapestry, which is not a tapestry but a work of embroidery. It was commissioned by Odo, the Bishop of Bayeux and first Earl of Kent, employing natives from Kent who were learned in the Nordic traditions imported in the previous half century by the Danish Vikings.",
            "question": "What is the oldest work of Norman art?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fe91604f3c001a3ffc48",
            "title": "Normans",
            "context": "By far the most famous work of Norman art is the Bayeux Tapestry, which is not a tapestry but a work of embroidery. It was commissioned by Odo, the Bishop of Bayeux and first Earl of Kent, employing natives from Kent who were learned in the Nordic traditions imported in the previous half century by the Danish Vikings.",
            "question": "Who commissioned Danish vikings to create the Bayeux Tapestry?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de51244396321400ee27ef",
            "title": "Normans",
            "context": "In Britain, Norman art primarily survives as stonework or metalwork, such as capitals and baptismal fonts. In southern Italy, however, Norman artwork survives plentifully in forms strongly influenced by its Greek, Lombard, and Arab forebears. Of the royal regalia preserved in Palermo, the crown is Byzantine in style and the coronation cloak is of Arab craftsmanship with Arabic inscriptions. Many churches preserve sculptured fonts, capitals, and more importantly mosaics, which were common in Norman Italy and drew heavily on the Greek heritage. Lombard Salerno was a centre of ivorywork in the 11th century and this continued under Norman domination. Finally should be noted the intercourse between French Crusaders traveling to the Holy Land who brought with them French artefacts with which to gift the churches at which they stopped in southern Italy amongst their Norman cousins. For this reason many south Italian churches preserve works from France alongside their native pieces.",
            "question": "What is the most important type of Norman art preserved in churches?",
            "answers": {
                "text": [
                    "mosaics",
                    "mosaics",
                    "mosaics"
                ],
                "answer_start": [
                    466,
                    466,
                    466
                ]
            }
        },
        {
            "id": "5ad3fe0d604f3c001a3ffc1b",
            "title": "Normans",
            "context": "In Britain, Norman art primarily survives as stonework or metalwork, such as capitals and baptismal fonts. In southern Italy, however, Norman artwork survives plentifully in forms strongly influenced by its Greek, Lombard, and Arab forebears. Of the royal regalia preserved in Palermo, the crown is Byzantine in style and the coronation cloak is of Arab craftsmanship with Arabic inscriptions. Many churches preserve sculptured fonts, capitals, and more importantly mosaics, which were common in Norman Italy and drew heavily on the Greek heritage. Lombard Salerno was a centre of ivorywork in the 11th century and this continued under Norman domination. Finally should be noted the intercourse between French Crusaders traveling to the Holy Land who brought with them French artefacts with which to gift the churches at which they stopped in southern Italy amongst their Norman cousins. For this reason many south Italian churches preserve works from France alongside their native pieces.",
            "question": "How has British art survived in Normandy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fe0d604f3c001a3ffc1c",
            "title": "Normans",
            "context": "In Britain, Norman art primarily survives as stonework or metalwork, such as capitals and baptismal fonts. In southern Italy, however, Norman artwork survives plentifully in forms strongly influenced by its Greek, Lombard, and Arab forebears. Of the royal regalia preserved in Palermo, the crown is Byzantine in style and the coronation cloak is of Arab craftsmanship with Arabic inscriptions. Many churches preserve sculptured fonts, capitals, and more importantly mosaics, which were common in Norman Italy and drew heavily on the Greek heritage. Lombard Salerno was a centre of ivorywork in the 11th century and this continued under Norman domination. Finally should be noted the intercourse between French Crusaders traveling to the Holy Land who brought with them French artefacts with which to gift the churches at which they stopped in southern Italy amongst their Norman cousins. For this reason many south Italian churches preserve works from France alongside their native pieces.",
            "question": "What is the most common form of Norman art in churches?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fe0d604f3c001a3ffc1d",
            "title": "Normans",
            "context": "In Britain, Norman art primarily survives as stonework or metalwork, such as capitals and baptismal fonts. In southern Italy, however, Norman artwork survives plentifully in forms strongly influenced by its Greek, Lombard, and Arab forebears. Of the royal regalia preserved in Palermo, the crown is Byzantine in style and the coronation cloak is of Arab craftsmanship with Arabic inscriptions. Many churches preserve sculptured fonts, capitals, and more importantly mosaics, which were common in Norman Italy and drew heavily on the Greek heritage. Lombard Salerno was a centre of ivorywork in the 11th century and this continued under Norman domination. Finally should be noted the intercourse between French Crusaders traveling to the Holy Land who brought with them French artefacts with which to gift the churches at which they stopped in southern Italy amongst their Norman cousins. For this reason many south Italian churches preserve works from France alongside their native pieces.",
            "question": "What was a centre of ivorywork in the 1100s?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de51c64396321400ee27f7",
            "title": "Normans",
            "context": "Normandy was the site of several important developments in the history of classical music in the 11th century. Fécamp Abbey and Saint-Evroul Abbey were centres of musical production and education. At Fécamp, under two Italian abbots, William of Volpiano and John of Ravenna, the system of denoting notes by letters was developed and taught. It is still the most common form of pitch representation in English- and German-speaking countries today. Also at Fécamp, the staff, around which neumes were oriented, was first developed and taught in the 11th century. Under the German abbot Isembard, La Trinité-du-Mont became a centre of musical composition.",
            "question": "In what century did important classical music developments occur in Normandy?",
            "answers": {
                "text": [
                    "11th",
                    "the 11th",
                    "11th"
                ],
                "answer_start": [
                    97,
                    93,
                    97
                ]
            }
        },
        {
            "id": "56de51c64396321400ee27f8",
            "title": "Normans",
            "context": "Normandy was the site of several important developments in the history of classical music in the 11th century. Fécamp Abbey and Saint-Evroul Abbey were centres of musical production and education. At Fécamp, under two Italian abbots, William of Volpiano and John of Ravenna, the system of denoting notes by letters was developed and taught. It is still the most common form of pitch representation in English- and German-speaking countries today. Also at Fécamp, the staff, around which neumes were oriented, was first developed and taught in the 11th century. Under the German abbot Isembard, La Trinité-du-Mont became a centre of musical composition.",
            "question": "Who were the two abbots at Fécamp Abbey?",
            "answers": {
                "text": [
                    "William of Volpiano and John of Ravenna",
                    "William of Volpiano and John of Ravenna",
                    "William of Volpiano and John of Ravenna"
                ],
                "answer_start": [
                    234,
                    234,
                    234
                ]
            }
        },
        {
            "id": "5ad3fd68604f3c001a3ffbe7",
            "title": "Normans",
            "context": "Normandy was the site of several important developments in the history of classical music in the 11th century. Fécamp Abbey and Saint-Evroul Abbey were centres of musical production and education. At Fécamp, under two Italian abbots, William of Volpiano and John of Ravenna, the system of denoting notes by letters was developed and taught. It is still the most common form of pitch representation in English- and German-speaking countries today. Also at Fécamp, the staff, around which neumes were oriented, was first developed and taught in the 11th century. Under the German abbot Isembard, La Trinité-du-Mont became a centre of musical composition.",
            "question": "What developed in Normandy during the 1100s?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad3fd68604f3c001a3ffbe8",
            "title": "Normans",
            "context": "Normandy was the site of several important developments in the history of classical music in the 11th century. Fécamp Abbey and Saint-Evroul Abbey were centres of musical production and education. At Fécamp, under two Italian abbots, William of Volpiano and John of Ravenna, the system of denoting notes by letters was developed and taught. It is still the most common form of pitch representation in English- and German-speaking countries today. Also at Fécamp, the staff, around which neumes were oriented, was first developed and taught in the 11th century. Under the German abbot Isembard, La Trinité-du-Mont became a centre of musical composition.",
            "question": "What was Fecamp Abby the center of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56de52614396321400ee27fb",
            "title": "Normans",
            "context": "At Saint Evroul, a tradition of singing had developed and the choir achieved fame in Normandy. Under the Norman abbot Robert de Grantmesnil, several monks of Saint-Evroul fled to southern Italy, where they were patronised by Robert Guiscard and established a Latin monastery at Sant'Eufemia. There they continued the tradition of singing.",
            "question": "Where did the monks flee to?",
            "answers": {
                "text": [
                    "southern Italy",
                    "southern Italy",
                    "southern Italy"
                ],
                "answer_start": [
                    179,
                    179,
                    179
                ]
            }
        },
        {
            "id": "56de52614396321400ee27fc",
            "title": "Normans",
            "context": "At Saint Evroul, a tradition of singing had developed and the choir achieved fame in Normandy. Under the Norman abbot Robert de Grantmesnil, several monks of Saint-Evroul fled to southern Italy, where they were patronised by Robert Guiscard and established a Latin monastery at Sant'Eufemia. There they continued the tradition of singing.",
            "question": "What monastery did the Saint-Evroul monks establish in Italy?",
            "answers": {
                "text": [
                    "Latin monastery at Sant'Eufemia.",
                    "a Latin monastery at Sant'Eufemia",
                    "Sant'Eufemia"
                ],
                "answer_start": [
                    259,
                    257,
                    278
                ]
            }
        },
        {
            "id": "56de52614396321400ee27fd",
            "title": "Normans",
            "context": "At Saint Evroul, a tradition of singing had developed and the choir achieved fame in Normandy. Under the Norman abbot Robert de Grantmesnil, several monks of Saint-Evroul fled to southern Italy, where they were patronised by Robert Guiscard and established a Latin monastery at Sant'Eufemia. There they continued the tradition of singing.",
            "question": "Who patronized the monks in Italy? ",
            "answers": {
                "text": [
                    "Robert Guiscard",
                    "Robert Guiscard",
                    "Robert Guiscard"
                ],
                "answer_start": [
                    225,
                    225,
                    225
                ]
            }
        },
        {
            "id": "56de52614396321400ee27fe",
            "title": "Normans",
            "context": "At Saint Evroul, a tradition of singing had developed and the choir achieved fame in Normandy. Under the Norman abbot Robert de Grantmesnil, several monks of Saint-Evroul fled to southern Italy, where they were patronised by Robert Guiscard and established a Latin monastery at Sant'Eufemia. There they continued the tradition of singing.",
            "question": "What tradition were the Saint-Evroul monks known for?",
            "answers": {
                "text": [
                    "singing",
                    "singing",
                    "singing"
                ],
                "answer_start": [
                    32,
                    32,
                    330
                ]
            }
        },
        {
            "id": "5ad3fccf604f3c001a3ffbb5",
            "title": "Normans",
            "context": "At Saint Evroul, a tradition of singing had developed and the choir achieved fame in Normandy. Under the Norman abbot Robert de Grantmesnil, several monks of Saint-Evroul fled to southern Italy, where they were patronised by Robert Guiscard and established a Latin monastery at Sant'Eufemia. There they continued the tradition of singing.",
            "question": "Who fled from southern Italy?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e16182e3433e1400422e28",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What branch of theoretical computer science deals with broadly classifying computational problems by difficulty and class of relationship?",
            "answers": {
                "text": [
                    "Computational complexity theory",
                    "Computational complexity theory",
                    "Computational complexity theory"
                ],
                "answer_start": [
                    0,
                    0,
                    0
                ]
            }
        },
        {
            "id": "56e16182e3433e1400422e29",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "By what main attribute are computational problems classified utilizing computational complexity theory? ",
            "answers": {
                "text": [
                    "inherent difficulty",
                    "their inherent difficulty",
                    "inherent difficulty"
                ],
                "answer_start": [
                    175,
                    169,
                    175
                ]
            }
        },
        {
            "id": "56e16182e3433e1400422e2a",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What is the term for a task that generally lends itself to being solved by a computer?",
            "answers": {
                "text": [
                    "computational problems",
                    "A computational problem",
                    "computational problem"
                ],
                "answer_start": [
                    133,
                    238,
                    240
                ]
            }
        },
        {
            "id": "5ad5316b5b96ef001a10ab72",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What is computational complexity principle?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5316b5b96ef001a10ab73",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What branch of theoretical computer class deals with broadly classifying computational problems by difficulty and class of relationship?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5316b5b96ef001a10ab74",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What is understood to be a task that is in principle not amendable to being solved by a computer?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5316b5b96ef001a10ab75",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": " What cannot be solved by mechanical application of mathematical steps?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5316b5b96ef001a10ab76",
            "title": "Computational_complexity_theory",
            "context": "Computational complexity theory is a branch of the theory of computation in theoretical computer science that focuses on classifying computational problems according to their inherent difficulty, and relating those classes to each other. A computational problem is understood to be a task that is in principle amenable to being solved by a computer, which is equivalent to stating that the problem may be solved by mechanical application of mathematical steps, such as an algorithm.",
            "question": "What is a manual application of mathematical steps?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e16839cd28a01900c67887",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What measure of a computational problem broadly defines the inherent difficulty of the solution?",
            "answers": {
                "text": [
                    "if its solution requires significant resources",
                    "its solution requires significant resources",
                    "if its solution requires significant resources"
                ],
                "answer_start": [
                    46,
                    49,
                    46
                ]
            }
        },
        {
            "id": "56e16839cd28a01900c67888",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What method is used to intuitively assess or quantify the amount of resources required to solve a computational problem?",
            "answers": {
                "text": [
                    "mathematical models of computation",
                    "mathematical models of computation",
                    "mathematical models of computation"
                ],
                "answer_start": [
                    176,
                    176,
                    176
                ]
            }
        },
        {
            "id": "56e16839cd28a01900c67889",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What are two basic primary resources used to guage complexity?",
            "answers": {
                "text": [
                    "time and storage",
                    "time and storage",
                    "time and storage"
                ],
                "answer_start": [
                    305,
                    305,
                    305
                ]
            }
        },
        {
            "id": "56e16839cd28a01900c6788a",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What unit is measured to determine circuit complexity?",
            "answers": {
                "text": [
                    "number of gates in a circuit",
                    "number of gates in a circuit",
                    "number of gates"
                ],
                "answer_start": [
                    440,
                    440,
                    440
                ]
            }
        },
        {
            "id": "56e16839cd28a01900c6788b",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What practical role does defining the complexity of problems play in everyday computing?",
            "answers": {
                "text": [
                    "determine the practical limits on what computers can and cannot do",
                    "what computers can and cannot do",
                    "determine the practical limits on what computers can and cannot do"
                ],
                "answer_start": [
                    615,
                    649,
                    615
                ]
            }
        },
        {
            "id": "5ad532575b96ef001a10ab7c",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What measure of computational problem broadly defines the inherent simplicity of the solution?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad532575b96ef001a10ab7d",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What method is not used to intuitively assess or quantify the amount of resources required to solve a computational problem??",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad532575b96ef001a10ab7e",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What are three basic primary resources used to gauge complexity?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad532575b96ef001a10ab7f",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What unit is measured to determine circuit simplicity?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad532575b96ef001a10ab80",
            "title": "Computational_complexity_theory",
            "context": "A problem is regarded as inherently difficult if its solution requires significant resources, whatever the algorithm used. The theory formalizes this intuition, by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them, such as time and storage. Other complexity measures are also used, such as the amount of communication (used in communication complexity), the number of gates in a circuit (used in circuit complexity) and the number of processors (used in parallel computing). One of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do.",
            "question": "What number is used in perpendicular computing?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e17644e3433e1400422f40",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What two fields of theoretical computer science closely mirror computational complexity theory?",
            "answers": {
                "text": [
                    "analysis of algorithms and computability theory",
                    "analysis of algorithms and computability theory",
                    "analysis of algorithms and computability theory"
                ],
                "answer_start": [
                    59,
                    59,
                    59
                ]
            }
        },
        {
            "id": "56e17644e3433e1400422f41",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What field of computer science analyzes the resource requirements of a specific algorithm isolated unto itself within a given problem?",
            "answers": {
                "text": [
                    "analysis of algorithms",
                    "analysis of algorithms",
                    "analysis of algorithms"
                ],
                "answer_start": [
                    59,
                    134,
                    134
                ]
            }
        },
        {
            "id": "56e17644e3433e1400422f42",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What field of computer science analyzes all possible algorithms in aggregate to determine the resource requirements needed to solve to a given problem?  ",
            "answers": {
                "text": [
                    "computational complexity theory",
                    "computational complexity theory",
                    "computational complexity theory"
                ],
                "answer_start": [
                    161,
                    161,
                    161
                ]
            }
        },
        {
            "id": "56e17644e3433e1400422f43",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What field of computer science is primarily concerned with determining the likelihood of whether or not a problem can ultimately be solved using algorithms?",
            "answers": {
                "text": [
                    "computability theory",
                    "computability theory",
                    "computability theory"
                ],
                "answer_start": [
                    86,
                    663,
                    663
                ]
            }
        },
        {
            "id": "5ad5344b5b96ef001a10ab86",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What are two fields of theoretical computer science that closely mirror computational simplicity theory?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5344b5b96ef001a10ab87",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What is not the key distinction between analysis of algorithms and computational complexity theory?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5344b5b96ef001a10ab88",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What is the process of analyzing the amount of resources needed by a particular algorithm to solve a hypothesis?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5344b5b96ef001a10ab89",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What is the process that asks a more specific question about all possible algorithms that could not be used to solve the same problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5344b5b96ef001a10ab8a",
            "title": "Computational_complexity_theory",
            "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically.",
            "question": "What process classifies problems that can and cannot be solved with approximately unlimited resources?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e17a7ccd28a01900c679a1",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is the name given to the input string of a computational problem?",
            "answers": {
                "text": [
                    "problem instance",
                    "a problem instance",
                    "problem instance"
                ],
                "answer_start": [
                    187,
                    185,
                    187
                ]
            }
        },
        {
            "id": "56e17a7ccd28a01900c679a2",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "In computational complexity theory, what is the term given to describe the baseline abstract question needing to be solved? ",
            "answers": {
                "text": [
                    "the problem",
                    "a problem",
                    "problem"
                ],
                "answer_start": [
                    237,
                    293,
                    295
                ]
            }
        },
        {
            "id": "56e17a7ccd28a01900c679a3",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "Is a problem instance typically characterized as abstract or concrete?",
            "answers": {
                "text": [
                    "concrete",
                    "concrete",
                    "abstract"
                ],
                "answer_start": [
                    402,
                    402,
                    317
                ]
            }
        },
        {
            "id": "56e17a7ccd28a01900c679a4",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is another name for any given measure of input associated with a problem?",
            "answers": {
                "text": [
                    "instances",
                    "the instance",
                    "instance"
                ],
                "answer_start": [
                    67,
                    675,
                    679
                ]
            }
        },
        {
            "id": "56e17a7ccd28a01900c679a5",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is the general term used to describe the output to any given input in a problem instance?",
            "answers": {
                "text": [
                    "solution",
                    "the solution",
                    "solution"
                ],
                "answer_start": [
                    93,
                    730,
                    734
                ]
            }
        },
        {
            "id": "5ad5364c5b96ef001a10ab90",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What can be viewed as a limited collection of instances together with a solution for every instance?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5364c5b96ef001a10ab91",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is the name given to the input string of a computational solution?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5364c5b96ef001a10ab92",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What term refers to the concrete question to be solved?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5364c5b96ef001a10ab93",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is the output corresponding to the given question?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5364c5b96ef001a10ab94",
            "title": "Computational_complexity_theory",
            "context": "A computational problem can be viewed as an infinite collection of instances together with a solution for every instance. The input string for a computational problem is referred to as a problem instance, and should not be confused with the problem itself. In computational complexity theory, a problem refers to the abstract question to be solved. In contrast, an instance of this problem is a rather concrete utterance, which can serve as the input for a decision problem. For example, consider the problem of primality testing. The instance is a number (e.g. 15) and the solution is \"yes\" if the number is prime and \"no\" otherwise (in this case \"no\"). Stated another way, the instance is a particular input to the problem, and the solution is the output corresponding to the given input.",
            "question": "What is a particular measure input associated with the a theory?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e17e6ee3433e1400422f7f",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "By how many kilometers does the traveling salesman problem seek to classify a route between the 15 largest cities in Germany?",
            "answers": {
                "text": [
                    "2000",
                    "2000",
                    "2000"
                ],
                "answer_start": [
                    190,
                    190,
                    190
                ]
            }
        },
        {
            "id": "56e17e6ee3433e1400422f80",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "What is one example of an instance that the quantitative answer to the traveling salesman problem fails to answer?",
            "answers": {
                "text": [
                    "round trip through all sites in Milan",
                    "asking for a round trip through all sites in Milan whose total length is at most 10 km",
                    "a round trip through all sites in Milan whose total length is at most 10 km"
                ],
                "answer_start": [
                    400,
                    387,
                    398
                ]
            }
        },
        {
            "id": "56e17e6ee3433e1400422f81",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "What does computational complexity theory most specifically seek to answer? ",
            "answers": {
                "text": [
                    "computational problems",
                    "computational problems",
                    "computational problems"
                ],
                "answer_start": [
                    520,
                    520,
                    520
                ]
            }
        },
        {
            "id": "5ad537a15b96ef001a10ab9a",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "How many miles does the traveling salesman problem seek to classify a route between the 15 smallest cities in Germany?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad537a15b96ef001a10ab9b",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "What is the qualitative answer to this particular problem instance?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad537a15b96ef001a10ab9c",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "What is one example of an instance that the qualitative answer to the traveling salesman fails to answer?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad537a15b96ef001a10ab9d",
            "title": "Computational_complexity_theory",
            "context": "To further highlight the difference between a problem and an instance, consider the following instance of the decision version of the traveling salesman problem: Is there a route of at most 2000 kilometres passing through all of Germany's 15 largest cities? The quantitative answer to this particular problem instance is of little use for solving other instances of the problem, such as asking for a round trip through all sites in Milan whose total length is at most 10 km. For this reason, complexity theory addresses computational problems and not particular problem instances.",
            "question": "What does computational simplicity theory most specifically seek to answer?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e181d9e3433e1400422fa0",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "In a computational problem, what can be described as a string over an alphabet?",
            "answers": {
                "text": [
                    "problem instance",
                    "a problem instance",
                    "problem instance"
                ],
                "answer_start": [
                    43,
                    41,
                    43
                ]
            }
        },
        {
            "id": "56e181d9e3433e1400422fa1",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is the name of the alphabet is most commonly used in a problem instance?",
            "answers": {
                "text": [
                    "binary alphabet",
                    "binary",
                    "binary"
                ],
                "answer_start": [
                    131,
                    131,
                    131
                ]
            }
        },
        {
            "id": "56e181d9e3433e1400422fa2",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is another term for the string of a problem instance?",
            "answers": {
                "text": [
                    "bitstrings",
                    "bitstrings",
                    "bitstrings"
                ],
                "answer_start": [
                    195,
                    195,
                    195
                ]
            }
        },
        {
            "id": "56e181d9e3433e1400422fa3",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "In the encoding of mathematical objects, what is the way in which integers are commonly expressed?",
            "answers": {
                "text": [
                    "binary notation",
                    "binary notation",
                    "binary notation"
                ],
                "answer_start": [
                    349,
                    349,
                    349
                ]
            }
        },
        {
            "id": "56e181d9e3433e1400422fa4",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is one way in which graphs can be encoded? ",
            "answers": {
                "text": [
                    "adjacency matrices",
                    "directly via their adjacency matrices"
                ],
                "answer_start": [
                    411,
                    392
                ]
            }
        },
        {
            "id": "5ad5391e5b96ef001a10aba2",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is a string over a Greek number when considering a computational problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5391e5b96ef001a10aba3",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is the name of the alphabet that is rarely used in a problem instance?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5391e5b96ef001a10aba4",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is another term for the the string of a problem question?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5391e5b96ef001a10aba5",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "What is represented by non-binary notation in the encoding of mathematical objects?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5391e5b96ef001a10aba6",
            "title": "Computational_complexity_theory",
            "context": "When considering computational problems, a problem instance is a string over an alphabet. Usually, the alphabet is taken to be the binary alphabet (i.e., the set {0,1}), and thus the strings are bitstrings. As in a real-world computer, mathematical objects other than bitstrings must be suitably encoded. For example, integers can be represented in binary notation, and graphs can be encoded directly via their adjacency matrices, or by encoding their adjacency lists in binary.",
            "question": "How can graphs be encoded indirectly?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e190bce3433e1400422fc8",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What kind of problems are one of the main topics studied in computational complexity theory?",
            "answers": {
                "text": [
                    "Decision problems",
                    "Decision problems",
                    "Decision"
                ],
                "answer_start": [
                    0,
                    0,
                    0
                ]
            }
        },
        {
            "id": "56e190bce3433e1400422fc9",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What are the two simple word responses to a decision problem?",
            "answers": {
                "text": [
                    "yes or no",
                    "yes or no",
                    "yes or no"
                ],
                "answer_start": [
                    179,
                    179,
                    179
                ]
            }
        },
        {
            "id": "56e190bce3433e1400422fca",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What are the two integer responses to a decision problem?",
            "answers": {
                "text": [
                    "1 or 0",
                    "1 or 0",
                    "1 or 0"
                ],
                "answer_start": [
                    212,
                    212,
                    212
                ]
            }
        },
        {
            "id": "56e190bce3433e1400422fcb",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What will the output be for a member of the language of a decision problem?",
            "answers": {
                "text": [
                    "yes",
                    "yes",
                    "yes"
                ],
                "answer_start": [
                    179,
                    339,
                    339
                ]
            }
        },
        {
            "id": "56e190bce3433e1400422fcc",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What answer denotes that an algorithm has accepted an input string?",
            "answers": {
                "text": [
                    "yes",
                    "yes",
                    "yes"
                ],
                "answer_start": [
                    179,
                    605,
                    605
                ]
            }
        },
        {
            "id": "5ad53b9d5b96ef001a10abc8",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What kind of solutions are one of the central objects of study in computational complexity theory?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53b9d5b96ef001a10abc9",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What is a typical type of computational problem whose answer is either yer or no?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53b9d5b96ef001a10abca",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What can be viewed as an informal language where the language instances whose input is yes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53b9d5b96ef001a10abcb",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What are the three integer responses to a decision problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53b9d5b96ef001a10abcc",
            "title": "Computational_complexity_theory",
            "context": "Decision problems are one of the central objects of study in computational complexity theory. A decision problem is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A decision problem can be viewed as a formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.",
            "question": "What answer denotes that a solution has accepted an input string?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e19557e3433e1400422fee",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What kind of graph is an example of an input used in a decision problem?",
            "answers": {
                "text": [
                    "arbitrary graph",
                    "arbitrary",
                    "arbitrary"
                ],
                "answer_start": [
                    67,
                    67,
                    67
                ]
            }
        },
        {
            "id": "56e19557e3433e1400422ff0",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What is the term for the set of all connected graphs related to this decision problem?",
            "answers": {
                "text": [
                    "formal language",
                    "The formal language",
                    "The formal language associated with this decision problem"
                ],
                "answer_start": [
                    167,
                    163,
                    163
                ]
            }
        },
        {
            "id": "56e19557e3433e1400422ff1",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What encoding decision needs to be made in order to determine an exact definition of the formal language?",
            "answers": {
                "text": [
                    "how graphs are encoded as binary strings",
                    "how graphs are encoded as binary strings",
                    "how graphs are encoded as binary strings"
                ],
                "answer_start": [
                    339,
                    339,
                    339
                ]
            }
        },
        {
            "id": "5ad53d705b96ef001a10abd2",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What type of graph is an example of an output used in a decision problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53d705b96ef001a10abd3",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What is the term for the set of all unconnected graphs related to this decision problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53d705b96ef001a10abd4",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "What encoding decision needs to be made in order to determine an inaccurate definition of the formal language? ",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53d705b96ef001a10abd5",
            "title": "Computational_complexity_theory",
            "context": "An example of a decision problem is the following. The input is an arbitrary graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this decision problem is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.",
            "question": "How does one obtain an indefinite definition of this language?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e19724cd28a01900c679f6",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "A function problem is an example of what?",
            "answers": {
                "text": [
                    "a computational problem",
                    "a computational problem",
                    "a computational problem"
                ],
                "answer_start": [
                    22,
                    22,
                    22
                ]
            }
        },
        {
            "id": "56e19724cd28a01900c679f7",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "How many outputs are expected for each input in a function problem?",
            "answers": {
                "text": [
                    "a single output",
                    "single",
                    "single"
                ],
                "answer_start": [
                    52,
                    54,
                    54
                ]
            }
        },
        {
            "id": "56e19724cd28a01900c679f8",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "The traveling salesman problem is an example of what type of problem?",
            "answers": {
                "text": [
                    "A function problem",
                    "function",
                    "function problem"
                ],
                "answer_start": [
                    0,
                    2,
                    2
                ]
            }
        },
        {
            "id": "56e19724cd28a01900c679f9",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "In addition to the traveling salesman problem, what is another example of a function problem?",
            "answers": {
                "text": [
                    "the integer factorization problem",
                    "integer factorization",
                    "integer factorization problem"
                ],
                "answer_start": [
                    277,
                    281,
                    281
                ]
            }
        },
        {
            "id": "56e19724cd28a01900c679fa",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "Is the output of a functional problem typically characterized by a simple or complex answer?",
            "answers": {
                "text": [
                    "complex",
                    "complex",
                    "complex"
                ],
                "answer_start": [
                    142,
                    142,
                    142
                ]
            }
        },
        {
            "id": "5ad53e615b96ef001a10abda",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "What is a computational solution where a single input is expected for every input?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53e615b96ef001a10abdb",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "What is expected where a computational problems offers multiple outputs are expected for every input?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53e615b96ef001a10abdc",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "What is a function solution an example of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53e615b96ef001a10abdd",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "What are other irrelevant examples of a function problem>",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53e615b96ef001a10abde",
            "title": "Computational_complexity_theory",
            "context": "A function problem is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem, that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.",
            "question": "Is the output of a functional solution typically characterized by a simple or complex answer?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1a0dccd28a01900c67a2e",
            "title": "Computational_complexity_theory",
            "context": "It is tempting to think that the notion of function problems is much richer than the notion of decision problems. However, this is not really the case, since function problems can be recast as decision problems. For example, the multiplication of two integers can be expressed as the set of triples (a, b, c) such that the relation a × b = c holds. Deciding whether a given triple is a member of this set corresponds to solving the problem of multiplying two numbers.",
            "question": "How can function problems typically be restated?",
            "answers": {
                "text": [
                    "decision problems",
                    "as decision problems",
                    "as decision problems"
                ],
                "answer_start": [
                    95,
                    190,
                    190
                ]
            }
        },
        {
            "id": "56e1a0dccd28a01900c67a2f",
            "title": "Computational_complexity_theory",
            "context": "It is tempting to think that the notion of function problems is much richer than the notion of decision problems. However, this is not really the case, since function problems can be recast as decision problems. For example, the multiplication of two integers can be expressed as the set of triples (a, b, c) such that the relation a × b = c holds. Deciding whether a given triple is a member of this set corresponds to solving the problem of multiplying two numbers.",
            "question": "If two integers are multiplied and output a value, what is this expression set called?",
            "answers": {
                "text": [
                    "set of triples",
                    "triple",
                    "the set of triples (a, b, c) such that the relation a × b = c holds"
                ],
                "answer_start": [
                    284,
                    374,
                    280
                ]
            }
        },
        {
            "id": "5ad53f815b96ef001a10abe4",
            "title": "Computational_complexity_theory",
            "context": "It is tempting to think that the notion of function problems is much richer than the notion of decision problems. However, this is not really the case, since function problems can be recast as decision problems. For example, the multiplication of two integers can be expressed as the set of triples (a, b, c) such that the relation a × b = c holds. Deciding whether a given triple is a member of this set corresponds to solving the problem of multiplying two numbers.",
            "question": "What can not be restated as decision problems?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53f815b96ef001a10abe5",
            "title": "Computational_complexity_theory",
            "context": "It is tempting to think that the notion of function problems is much richer than the notion of decision problems. However, this is not really the case, since function problems can be recast as decision problems. For example, the multiplication of two integers can be expressed as the set of triples (a, b, c) such that the relation a × b = c holds. Deciding whether a given triple is a member of this set corresponds to solving the problem of multiplying two numbers.",
            "question": "What is the expression set called where three integers are multiplied?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad53f815b96ef001a10abe6",
            "title": "Computational_complexity_theory",
            "context": "It is tempting to think that the notion of function problems is much richer than the notion of decision problems. However, this is not really the case, since function problems can be recast as decision problems. For example, the multiplication of two integers can be expressed as the set of triples (a, b, c) such that the relation a × b = c holds. Deciding whether a given triple is a member of this set corresponds to solving the problem of multiplying two numbers.",
            "question": "What corresponds to solving the problem of multiplying three numbers/",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1a38de3433e140042305c",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "What is a commonly used measurement used to determine the complexity of a computational problem?",
            "answers": {
                "text": [
                    "how much time the best algorithm requires to solve the problem",
                    "time",
                    "time"
                ],
                "answer_start": [
                    82,
                    91,
                    91
                ]
            }
        },
        {
            "id": "56e1a38de3433e140042305d",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "What is one variable on which the running time may be contingent?",
            "answers": {
                "text": [
                    "the instance",
                    "the instance",
                    "the size of the instance"
                ],
                "answer_start": [
                    199,
                    199,
                    405
                ]
            }
        },
        {
            "id": "56e1a38de3433e140042305e",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "How is the time needed to obtain the solution to a problem calculated?",
            "answers": {
                "text": [
                    "as a function of the size of the instance",
                    "as a function of the size of the instance",
                    "a function of the size of the instance"
                ],
                "answer_start": [
                    388,
                    388,
                    391
                ]
            }
        },
        {
            "id": "56e1a38de3433e140042305f",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "In what unit is the size of the input measured?",
            "answers": {
                "text": [
                    "bits",
                    "bits",
                    "bits"
                ],
                "answer_start": [
                    484,
                    484,
                    484
                ]
            }
        },
        {
            "id": "56e1a38de3433e1400423060",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "Complexity theory seeks to define the relationship between the scale of algorithms with respect to what other variable?",
            "answers": {
                "text": [
                    "an increase in the input size",
                    "input size",
                    "input size"
                ],
                "answer_start": [
                    551,
                    570,
                    570
                ]
            }
        },
        {
            "id": "5ad541ad5b96ef001a10abea",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "How does one measure the simplicity of a computational problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad541ad5b96ef001a10abeb",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "What is one variable which the running of time be not be contingent?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad541ad5b96ef001a10abec",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "How is the time needed to obtain the question to a problem calculated?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad541ad5b96ef001a10abed",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "What is  interested in how algorithms scale with a decrease in the input size?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad541ad5b96ef001a10abee",
            "title": "Computational_complexity_theory",
            "context": "To measure the difficulty of solving a computational problem, one may wish to see how much time the best algorithm requires to solve the problem. However, the running time may, in general, depend on the instance. In particular, larger instances will require more time to solve. Thus the time required to solve a problem (or the space required, or any measure of complexity) is calculated as a function of the size of the instance. This is usually taken to be the size of the input in bits. Complexity theory is interested in how algorithms scale with an increase in the input size. For instance, in the problem of finding whether a graph is connected, how much more time does it take to solve a problem for a graph with 2n vertices compared to the time taken for a graph with n vertices?",
            "question": "How is time not required to solve a problem calculated?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1a564cd28a01900c67a48",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "Whose thesis states that the solution to a problem is solvable with reasonable resources assuming it allows for a polynomial time algorithm?",
            "answers": {
                "text": [
                    "Cobham's thesis",
                    "Cobham's",
                    "Cobham"
                ],
                "answer_start": [
                    347,
                    347,
                    347
                ]
            }
        },
        {
            "id": "56e1a564cd28a01900c67a49",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "If input size is is equal to n, what can respectively be assumed is the function of n?",
            "answers": {
                "text": [
                    "the time taken",
                    "the time taken",
                    "the time taken"
                ],
                "answer_start": [
                    24,
                    24,
                    24
                ]
            }
        },
        {
            "id": "56e1a564cd28a01900c67a4a",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "What term corresponds to the maximum measurement of time across all functions of n? ",
            "answers": {
                "text": [
                    "worst-case time complexity",
                    "worst-case time complexity",
                    "the worst-case time complexity"
                ],
                "answer_start": [
                    156,
                    156,
                    152
                ]
            }
        },
        {
            "id": "56e1a564cd28a01900c67a4b",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "How is worst-case time complexity written as an expression?",
            "answers": {
                "text": [
                    "T(n)",
                    "T(n)",
                    "T(n)"
                ],
                "answer_start": [
                    183,
                    183,
                    183
                ]
            }
        },
        {
            "id": "56e1a564cd28a01900c67a4c",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "Assuming that T represents a polynomial in T(n), what is the term given to the corresponding algorithm?",
            "answers": {
                "text": [
                    "polynomial time algorithm",
                    "polynomial time",
                    "polynomial time algorithm"
                ],
                "answer_start": [
                    320,
                    320,
                    320
                ]
            }
        },
        {
            "id": "5ad542db5b96ef001a10abf4",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "How is time taken expressed as a function of x?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad542db5b96ef001a10abf5",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "Whose hypothesis states the the solution to a problem is solvable with reasonable resources assuming it allows for monoinomial time algorithm?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad542db5b96ef001a10abf6",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "What term corresponds to the minimum measurement of the time across all functions of n?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad542db5b96ef001a10abf7",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "How is best-case time complexity written as an expression?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad542db5b96ef001a10abf8",
            "title": "Computational_complexity_theory",
            "context": "If the input size is n, the time taken can be expressed as a function of n. Since the time taken on different inputs of the same size can be different, the worst-case time complexity T(n) is defined to be the maximum time taken over all inputs of size n. If T(n) is a polynomial in n, then the algorithm is said to be a polynomial time algorithm. Cobham's thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm.",
            "question": "What is the term given to the corresponding algorithm assuming that T represents a mononominal in T(n)?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1aba0e3433e1400423094",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What is the term for a mathematical model that theoretically represents a general computing machine?",
            "answers": {
                "text": [
                    "A Turing machine",
                    "A Turing machine",
                    "Turing machine"
                ],
                "answer_start": [
                    0,
                    0,
                    2
                ]
            }
        },
        {
            "id": "56e1aba0e3433e1400423095",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "It is generally assumed that a Turing machine can solve anything capable of also being solved using what?",
            "answers": {
                "text": [
                    "an algorithm",
                    "an algorithm",
                    "an algorithm"
                ],
                "answer_start": [
                    427,
                    427,
                    427
                ]
            }
        },
        {
            "id": "56e1aba0e3433e1400423097",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What is the most commonplace model utilized in complexity theory?",
            "answers": {
                "text": [
                    "the Turing machine",
                    "the Turing machine",
                    "Turing machine"
                ],
                "answer_start": [
                    924,
                    924,
                    928
                ]
            }
        },
        {
            "id": "56e1aba0e3433e1400423098",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What does a Turing machine handle on a strip of tape?",
            "answers": {
                "text": [
                    "symbols",
                    "symbols",
                    "symbols"
                ],
                "answer_start": [
                    117,
                    117,
                    117
                ]
            }
        },
        {
            "id": "5ad543c05b96ef001a10abfe",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What a scientific model of a general computing machine?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad543c05b96ef001a10abff",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What is a scientific device that manipulates symbols contained on a strip of tape?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad543c05b96ef001a10ac00",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What are intended as a practical computing technology?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad543c05b96ef001a10ac01",
            "title": "Computational_complexity_theory",
            "context": "A Turing machine is a mathematical model of a general computing machine. It is a theoretical device that manipulates symbols contained on a strip of tape. Turing machines are not intended as a practical computing technology, but rather as a thought experiment representing a computing machine—anything from an advanced supercomputer to a mathematician with a pencil and paper. It is believed that if a problem can be solved by an algorithm, there exists a Turing machine that solves the problem. Indeed, this is the statement of the Church–Turing thesis. Furthermore, it is known that everything that can be computed on other models of computation known to us today, such as a RAM machine, Conway's Game of Life, cellular automata or any programming language can be computed on a Turing machine. Since Turing machines are easy to analyze mathematically, and are believed to be as powerful as any other model of computation, the Turing machine is the most commonly used model in complexity theory.",
            "question": "What is a scientific experiment that can solve a problem by algorithms?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1aff7cd28a01900c67a68",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What is generally considered to be the most basic iteration of a Turing machine?",
            "answers": {
                "text": [
                    "A deterministic Turing machine",
                    "deterministic",
                    "deterministic Turing machine"
                ],
                "answer_start": [
                    0,
                    2,
                    2
                ]
            }
        },
        {
            "id": "56e1aff7cd28a01900c67a69",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What fixed set of factors determine the actions of a deterministic Turing machine",
            "answers": {
                "text": [
                    "rules",
                    "rules",
                    "a fixed set of rules to determine its future actions"
                ],
                "answer_start": [
                    91,
                    91,
                    76
                ]
            }
        },
        {
            "id": "56e1aff7cd28a01900c67a6a",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What is the term used to identify a deterministic Turing machine that has additional random bits?",
            "answers": {
                "text": [
                    "A probabilistic Turing machine",
                    "probabilistic",
                    "probabilistic Turing machine"
                ],
                "answer_start": [
                    130,
                    132,
                    132
                ]
            }
        },
        {
            "id": "56e1aff7cd28a01900c67a6b",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What type of Turing machine is capable of multiple actions and extends into a variety of computational paths?",
            "answers": {
                "text": [
                    "A non-deterministic Turing machine",
                    "non-deterministic",
                    "non-deterministic Turing machine"
                ],
                "answer_start": [
                    398,
                    400,
                    400
                ]
            }
        },
        {
            "id": "56e1aff7cd28a01900c67a6c",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What is the term given to algorithms that utilize random bits?",
            "answers": {
                "text": [
                    "randomized algorithms",
                    "randomized algorithms",
                    "randomized algorithms"
                ],
                "answer_start": [
                    375,
                    375,
                    375
                ]
            }
        },
        {
            "id": "5ad546c75b96ef001a10ac0e",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What uses a flexible set of rules to determine its future actions?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad546c75b96ef001a10ac0f",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What is a deterministic Turing machine with an extra supply of random ribbons?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad546c75b96ef001a10ac10",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "What does not often help algorithms solve problems more efficiently?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad546c75b96ef001a10ac11",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "Which machine allows the machine to have multiple possible past actions from a given state?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad546c75b96ef001a10ac12",
            "title": "Computational_complexity_theory",
            "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm.",
            "question": "How is one way that one should not view non-determinism?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b00ce3433e140042309e",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "Turing machines are commonly employed to define what? ",
            "answers": {
                "text": [
                    "complexity classes",
                    "complexity classes",
                    "complexity classes"
                ],
                "answer_start": [
                    49,
                    49,
                    49
                ]
            }
        },
        {
            "id": "56e1b00ce3433e140042309f",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "What are two factors that directly effect how powerful a Turing machine may or may not be?",
            "answers": {
                "text": [
                    "time or space",
                    "time or space",
                    "time or space"
                ],
                "answer_start": [
                    330,
                    330,
                    330
                ]
            }
        },
        {
            "id": "56e1b00ce3433e14004230a1",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "In the determination of complexity classes, what are two examples of types of Turing machines?",
            "answers": {
                "text": [
                    "probabilistic Turing machines, non-deterministic Turing machines",
                    "probabilistic Turing machines, non-deterministic Turing machines"
                ],
                "answer_start": [
                    108,
                    108
                ]
            }
        },
        {
            "id": "5ad545545b96ef001a10ac06",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "What are many types of Turing machines not used for?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad545545b96ef001a10ac07",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "What are three factors that directly effect how powerful a Turing machine may or may not be?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad545545b96ef001a10ac08",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "What machines are not equally powerful in principle?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad545545b96ef001a10ac09",
            "title": "Computational_complexity_theory",
            "context": "Many types of Turing machines are used to define complexity classes, such as deterministic Turing machines, probabilistic Turing machines, non-deterministic Turing machines, quantum Turing machines, symmetric Turing machines and alternating Turing machines. They are all equally powerful in principle, but when resources (such as time or space) are bounded, some of these may be more powerful than others.",
            "question": "What may not be more powerful than others when the resources of time or space of considered?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b169cd28a01900c67a72",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What is an example of a machine model that deviates from a generally accepted multi-tape Turing machine?",
            "answers": {
                "text": [
                    "random access machines",
                    "random access machines",
                    "random access machines"
                ],
                "answer_start": [
                    125,
                    125,
                    125
                ]
            }
        },
        {
            "id": "56e1b169cd28a01900c67a73",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "In considering Turing machines and alternate variables, what measurement left unaffected by conversion between machine models? ",
            "answers": {
                "text": [
                    "computational power",
                    "computational power",
                    "computational power"
                ],
                "answer_start": [
                    248,
                    248,
                    248
                ]
            }
        },
        {
            "id": "56e1b169cd28a01900c67a74",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What two resources commonly consumed by alternate models are typically known to vary?",
            "answers": {
                "text": [
                    "time and memory",
                    "time and memory consumption",
                    "time and memory consumption"
                ],
                "answer_start": [
                    273,
                    273,
                    273
                ]
            }
        },
        {
            "id": "56e1b169cd28a01900c67a75",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What commonality do alternate machine models, such as random access machines, share with Turing machines?",
            "answers": {
                "text": [
                    "the machines operate deterministically",
                    "deterministically",
                    "the machines operate deterministically"
                ],
                "answer_start": [
                    382,
                    403,
                    382
                ]
            }
        },
        {
            "id": "5ad547945b96ef001a10ac18",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What is not an example of a machine model that deviates from a generally accepted multi-tape Turing machine?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad547945b96ef001a10ac19",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What measurement is affected by conversion between machine models?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad547945b96ef001a10ac1a",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What two resources are uncommonly consumed by alternate models and are typically known to vary?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad547945b96ef001a10ac1b",
            "title": "Computational_complexity_theory",
            "context": "Many machine models different from the standard multi-tape Turing machines have been proposed in the literature, for example random access machines. Perhaps surprisingly, each of these models can be converted to another without providing any extra computational power. The time and memory consumption of these alternate models may vary. What all these models have in common is that the machines operate deterministically.",
            "question": "What do all these models not have in common?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b355e3433e14004230b0",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What type of Turing machine can be characterized by checking multiple possibilities at the same time?",
            "answers": {
                "text": [
                    "non-deterministic",
                    "non-deterministic",
                    "non-deterministic Turing machine"
                ],
                "answer_start": [
                    110,
                    110,
                    110
                ]
            }
        },
        {
            "id": "56e1b355e3433e14004230b1",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What often affects or facilitates ease of analysis in computational problems?",
            "answers": {
                "text": [
                    "unusual resources",
                    "more unusual resources",
                    "more unusual resources"
                ],
                "answer_start": [
                    76,
                    71,
                    71
                ]
            }
        },
        {
            "id": "56e1b355e3433e14004230b2",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "A non-deterministic Turing machine has the ability to capture what facet of useful analysis?",
            "answers": {
                "text": [
                    "mathematical models",
                    "mathematical models",
                    "branching"
                ],
                "answer_start": [
                    402,
                    402,
                    363
                ]
            }
        },
        {
            "id": "56e1b355e3433e14004230b3",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What is the most critical resource in the analysis of computational problems associated with non-deterministic Turing machines?",
            "answers": {
                "text": [
                    "time",
                    "non-deterministic time",
                    "non-deterministic time"
                ],
                "answer_start": [
                    468,
                    450,
                    450
                ]
            }
        },
        {
            "id": "5ad5489b5b96ef001a10ac2a",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What is harder to analyze in terms of more unusual resources?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5489b5b96ef001a10ac2b",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What type of machine is a computational model that is not allowed to branch out to check many different possibilities at once?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5489b5b96ef001a10ac2c",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What has a lot to do with how we physically want to compute algorithms?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5489b5b96ef001a10ac2d",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What machine's branching does not exactly capture many of the mathematical models we want to analyze?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5489b5b96ef001a10ac2e",
            "title": "Computational_complexity_theory",
            "context": "However, some computational problems are easier to analyze in terms of more unusual resources. For example, a non-deterministic Turing machine is a computational model that is allowed to branch out to check many different possibilities at once. The non-deterministic Turing machine has very little to do with how we physically want to compute algorithms, but its branching exactly captures many of the mathematical models we want to analyze, so that non-deterministic time is a very important resource in analyzing computational problems.",
            "question": "What is the least critical resource in the analysis of computational problems associated with non-deterministic Turing machines?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b62ecd28a01900c67aa3",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "The time required to output an answer on a deterministic Turing machine is expressed as what?",
            "answers": {
                "text": [
                    "state transitions",
                    "the total number of state transitions, or steps",
                    "total number of state transitions, or steps, the machine makes before it halts and outputs the answer"
                ],
                "answer_start": [
                    261,
                    241,
                    245
                ]
            }
        },
        {
            "id": "56e1b62ecd28a01900c67aa4",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "Complexity theory classifies problems based on what primary attribute?",
            "answers": {
                "text": [
                    "difficulty",
                    "difficulty",
                    "difficulty"
                ],
                "answer_start": [
                    695,
                    695,
                    695
                ]
            }
        },
        {
            "id": "56e1b62ecd28a01900c67aa5",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "What is the expression used to identify any given series of problems capable of being solved within time on a deterministic Turing machine?",
            "answers": {
                "text": [
                    "DTIME(f(n))",
                    "DTIME(f(n)).",
                    "DTIME(f(n))"
                ],
                "answer_start": [
                    873,
                    873,
                    873
                ]
            }
        },
        {
            "id": "56e1b62ecd28a01900c67aa6",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "What is the most critical resource measured to in assessing the determination of a Turing machine's ability to solve any given set of problems?",
            "answers": {
                "text": [
                    "time",
                    "time",
                    "time"
                ],
                "answer_start": [
                    85,
                    583,
                    583
                ]
            }
        },
        {
            "id": "5ad54a375b96ef001a10ac48",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "What is not used for a precise definition of what it means to solve a problem using a given amount of time and space?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54a375b96ef001a10ac49",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "How is Turing machine M said not to operate?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54a375b96ef001a10ac4a",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "What is the expression used to identify any given series of solutions capable of being solved within time on a deterministic Turing machine?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54a375b96ef001a10ac4b",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "What is the least critical resource measured in assessing the determination of a Turing machine's ability to solve any given set of problems?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54a375b96ef001a10ac4c",
            "title": "Computational_complexity_theory",
            "context": "For a precise definition of what it means to solve a problem using a given amount of time and space, a computational model such as the deterministic Turing machine is used. The time required by a deterministic Turing machine M on input x is the total number of state transitions, or steps, the machine makes before it halts and outputs the answer (\"yes\" or \"no\"). A Turing machine M is said to operate within time f(n), if the time required by M on each input of length n is at most f(n). A decision problem A can be solved in time f(n) if there exists a Turing machine operating in time f(n) that solves the problem. Since complexity theory is interested in classifying problems based on their difficulty, one defines sets of problems based on some criteria. For instance, the set of problems solvable within time f(n) on a deterministic Turing machine is then denoted by DTIME(f(n)).",
            "question": "How can decision problem B be solved in time x(f)?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b754cd28a01900c67abc",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "Time and space are both examples of what type of resource?",
            "answers": {
                "text": [
                    "complexity resources",
                    "complexity resources",
                    "complexity"
                ],
                "answer_start": [
                    106,
                    106,
                    106
                ]
            }
        },
        {
            "id": "56e1b754cd28a01900c67abd",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "A complexity resource can also be described as what other type of resource?",
            "answers": {
                "text": [
                    "computational resource",
                    "computational",
                    "computational"
                ],
                "answer_start": [
                    170,
                    170,
                    170
                ]
            }
        },
        {
            "id": "56e1b754cd28a01900c67abe",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "What is typically used to broadly define complexity measures?",
            "answers": {
                "text": [
                    "Blum complexity axioms",
                    "the Blum complexity axioms",
                    "the Blum complexity axioms"
                ],
                "answer_start": [
                    248,
                    244,
                    244
                ]
            }
        },
        {
            "id": "56e1b754cd28a01900c67abf",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "Communication complexity is an example of what type of measure?",
            "answers": {
                "text": [
                    "Complexity measures",
                    "complexity measures",
                    "complexity"
                ],
                "answer_start": [
                    194,
                    278,
                    278
                ]
            }
        },
        {
            "id": "56e1b754cd28a01900c67ac0",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "Decision tree is an example of what type of measure?",
            "answers": {
                "text": [
                    "Complexity measures",
                    "complexity measures",
                    "complexity"
                ],
                "answer_start": [
                    194,
                    278,
                    396
                ]
            }
        },
        {
            "id": "5ad54b035b96ef001a10ac52",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "What can not be made for space requirements?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54b035b96ef001a10ac53",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "What are the least well known complexity resources?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54b035b96ef001a10ac54",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "How are complexity measures generally not defined?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54b035b96ef001a10ac55",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "What are other complexity measures not used in complexity theory?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54b035b96ef001a10ac56",
            "title": "Computational_complexity_theory",
            "context": "Analogous definitions can be made for space requirements. Although time and space are the most well-known complexity resources, any complexity measure can be viewed as a computational resource. Complexity measures are very generally defined by the Blum complexity axioms. Other complexity measures used in complexity theory include communication complexity, circuit complexity, and decision tree complexity.",
            "question": "What type of measure is communication complexity not an example of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1b8f3e3433e14004230e6",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What are the three primary expressions used to represent case complexity?",
            "answers": {
                "text": [
                    "best, worst and average",
                    "best, worst and average case",
                    "best, worst and average case complexity"
                ],
                "answer_start": [
                    4,
                    4,
                    4
                ]
            }
        },
        {
            "id": "56e1b8f3e3433e14004230e7",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "Case complexity likelihoods provide variable probabilities of what general measure? ",
            "answers": {
                "text": [
                    "complexity measure",
                    "complexity",
                    "complexity"
                ],
                "answer_start": [
                    121,
                    121,
                    121
                ]
            }
        },
        {
            "id": "56e1b8f3e3433e14004230e8",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What is one common example of a critical complexity measure?",
            "answers": {
                "text": [
                    "time",
                    "time complexity",
                    "time complexity"
                ],
                "answer_start": [
                    91,
                    91,
                    91
                ]
            }
        },
        {
            "id": "56e1b8f3e3433e14004230e9",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "Case complexities provide three likelihoods of what differing variable that remains the same size? ",
            "answers": {
                "text": [
                    "inputs",
                    "inputs",
                    "inputs"
                ],
                "answer_start": [
                    154,
                    154,
                    154
                ]
            }
        },
        {
            "id": "5ad54c2f5b96ef001a10ac5c",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What are the three secondary expressions used to represent case complexity? ",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54c2f5b96ef001a10ac5d",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What three different ways are used to measure space complexity?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54c2f5b96ef001a10ac5e",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What is one not common example of a critical complexity measure?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54c2f5b96ef001a10ac5f",
            "title": "Computational_complexity_theory",
            "context": "The best, worst and average case complexity refer to three different ways of measuring the time complexity (or any other complexity measure) of different inputs of the same size. Since some inputs of size n may be faster to solve than others, we define the following complexities:",
            "question": "What differing variable remains the same size when providing the four likelihoods of case complexities?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1ba41cd28a01900c67ae0",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What provides a solution to a list of integers provided as input that ned to be sorted?",
            "answers": {
                "text": [
                    "deterministic sorting algorithm quicksort",
                    "quicksort",
                    "the deterministic sorting algorithm quicksort"
                ],
                "answer_start": [
                    26,
                    58,
                    22
                ]
            }
        },
        {
            "id": "56e1ba41cd28a01900c67ae1",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "When extensive time is required to sort integers, this represents what case complexity?",
            "answers": {
                "text": [
                    "worst-case",
                    "worst",
                    "worst-case"
                ],
                "answer_start": [
                    155,
                    155,
                    155
                ]
            }
        },
        {
            "id": "56e1ba41cd28a01900c67ae2",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What is the expression used to denote a worst case complexity as expressed by time taken?",
            "answers": {
                "text": [
                    "O(n2)",
                    "O(n2)",
                    "O(n2)"
                ],
                "answer_start": [
                    251,
                    251,
                    251
                ]
            }
        },
        {
            "id": "5ad54d625b96ef001a10ac64",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What does not solve the problem of sorting a list of integers that is given as the input?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54d625b96ef001a10ac65",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What does the deterministic parting algorithm quicksort do?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54d625b96ef001a10ac66",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What case complexity is represented when limited time is required to sort integers?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54d625b96ef001a10ac67",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What is the expression not used to denote worst case complexity as expressed by time taken?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54d625b96ef001a10ac68",
            "title": "Computational_complexity_theory",
            "context": "For example, consider the deterministic sorting algorithm quicksort. This solves the problem of sorting a list of integers that is given as the input. The worst-case is when the input is sorted or sorted in reverse order, and the algorithm takes time O(n2) for this case. If we assume that all possible permutations of the input list are equally likely, the average time taken for sorting is O(n log n). The best case occurs when each pivoting divides the list in half, also needing O(n log n) time.",
            "question": "What case complexity is represented when each pivoting divides the list in thirds, also needing O(n log n) time?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1bc3ae3433e1400423104",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "Classification of resources is contingent on determining the upper and lower bounds of minimum time required by what?  ",
            "answers": {
                "text": [
                    "the most efficient algorithm",
                    "the most efficient algorithm",
                    "the most efficient algorithm solving a given problem"
                ],
                "answer_start": [
                    178,
                    178,
                    178
                ]
            }
        },
        {
            "id": "56e1bc3ae3433e1400423105",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "The analysis of a specific algorithm is typically assigned to what field of computational science?",
            "answers": {
                "text": [
                    "analysis of algorithms",
                    "analysis of algorithms",
                    "analysis of algorithms"
                ],
                "answer_start": [
                    399,
                    399,
                    399
                ]
            }
        },
        {
            "id": "56e1bc3ae3433e1400423106",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "Which bound of time is more difficult to establish?",
            "answers": {
                "text": [
                    "lower bounds",
                    "lower",
                    "lower bounds"
                ],
                "answer_start": [
                    123,
                    597,
                    597
                ]
            }
        },
        {
            "id": "56e1bc3ae3433e1400423107",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "A specific algorithm demonstrating T(n) represents what measure of time complexity?",
            "answers": {
                "text": [
                    "upper bound",
                    "upper and lower bounds",
                    "upper bound"
                ],
                "answer_start": [
                    434,
                    113,
                    434
                ]
            }
        },
        {
            "id": "56e1bc3ae3433e1400423108",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "What is the colloquial phrase used to convey the continuum of algorithms with unlimited availability irrespective of time? ",
            "answers": {
                "text": [
                    "all possible algorithms",
                    "all possible algorithms",
                    "all possible algorithms"
                ],
                "answer_start": [
                    676,
                    740,
                    740
                ]
            }
        },
        {
            "id": "5ad54e7c5b96ef001a10ac76",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "How does one note classify the computation time (or similar resources)?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54e7c5b96ef001a10ac77",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "What is usually taken as the best case complexity, unless specified otherwise?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54e7c5b96ef001a10ac78",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "What does not fall under the field of analysis of algorithms>",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54e7c5b96ef001a10ac79",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "When does one not need to show only that there is a particular algorithm running time at mons T(nO?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54e7c5b96ef001a10ac7a",
            "title": "Computational_complexity_theory",
            "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n).",
            "question": "What is easy about proving lower bounds?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1bd4acd28a01900c67afc",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "What expression is generally used to convey upper or lower bounds?",
            "answers": {
                "text": [
                    "big O notation",
                    "big O notation",
                    "big O notation"
                ],
                "answer_start": [
                    52,
                    52,
                    52
                ]
            }
        },
        {
            "id": "56e1bd4acd28a01900c67afd",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "What does a big O notation hide?",
            "answers": {
                "text": [
                    "constant factors and smaller terms",
                    "constant factors and smaller terms",
                    "constant factors and smaller terms"
                ],
                "answer_start": [
                    80,
                    80,
                    80
                ]
            }
        },
        {
            "id": "56e1bd4acd28a01900c67afe",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "How would one write T(n) = 7n2 + 15n + 40 in big O notation? ",
            "answers": {
                "text": [
                    "T(n) = O(n2)",
                    "T(n) = O(n2)",
                    "T(n) = O(n2)"
                ],
                "answer_start": [
                    281,
                    281,
                    281
                ]
            }
        },
        {
            "id": "56e1bd4acd28a01900c67aff",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "Big O notation provides autonomy to upper and lower bounds with relationship to what? ",
            "answers": {
                "text": [
                    "the computational model",
                    "specific details of the computational model used",
                    "the specific details of the computational model used"
                ],
                "answer_start": [
                    177,
                    157,
                    153
                ]
            }
        },
        {
            "id": "5ad54f775b96ef001a10ac88",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "What is usually not stated using the big O notation?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54f775b96ef001a10ac89",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "What does not hide constant factors or smaller terms?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54f775b96ef001a10ac8a",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "What makes the bounds dependent of the specific details of the computational model?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad54f775b96ef001a10ac8b",
            "title": "Computational_complexity_theory",
            "context": "Upper and lower bounds are usually stated using the big O notation, which hides constant factors and smaller terms. This makes the bounds independent of the specific details of the computational model used. For instance, if T(n) = 7n2 + 15n + 40, in big O notation one would write T(n) = O(n2).",
            "question": "How would one abbreviate T(n)=8n2 + 16n = 40 in big O notatation?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c0f6cd28a01900c67b2c",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "What has complicated definitions that prevent classification into a framework?",
            "answers": {
                "text": [
                    "complexity classes",
                    "complexity classes",
                    "some complexity classes"
                ],
                "answer_start": [
                    16,
                    16,
                    11
                ]
            }
        },
        {
            "id": "56e1c0f6cd28a01900c67b2d",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "Complexity classes are generally classified into what?",
            "answers": {
                "text": [
                    "framework",
                    "framework",
                    "framework"
                ],
                "answer_start": [
                    90,
                    90,
                    90
                ]
            }
        },
        {
            "id": "56e1c0f6cd28a01900c67b2e",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "Difficulty in establishing a framework for complexity classes can be caused by what variable?",
            "answers": {
                "text": [
                    "complicated definitions",
                    "complicated definitions",
                    "definitions"
                ],
                "answer_start": [
                    40,
                    40,
                    52
                ]
            }
        },
        {
            "id": "5ad5501f5b96ef001a10ac90",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "What fits the framework of complexity classes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5501f5b96ef001a10ac91",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "What has uncomplicated definitions that prevent classification into a framework?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5501f5b96ef001a10ac92",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "What are complexity classes generally not classified into?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5501f5b96ef001a10ac93",
            "title": "Computational_complexity_theory",
            "context": "Of course, some complexity classes have complicated definitions that do not fit into this framework. Thus, a typical complexity class has a definition like the following:",
            "question": "What variable is easy to establish in a framework for complexity classes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c2eee3433e1400423134",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "Concrete bounding of computation time frequently produces complexity classes contingent upon what?",
            "answers": {
                "text": [
                    "chosen machine model",
                    "the chosen machine model",
                    "the chosen machine model"
                ],
                "answer_start": [
                    122,
                    118,
                    118
                ]
            }
        },
        {
            "id": "56e1c2eee3433e1400423135",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "A multi-tape Turing machine requires what type of time for a solution?",
            "answers": {
                "text": [
                    "linear time",
                    "linear",
                    "linear"
                ],
                "answer_start": [
                    218,
                    218,
                    218
                ]
            }
        },
        {
            "id": "56e1c2eee3433e1400423136",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "A language solved in quadratic time implies the use of what type of Turing machine?",
            "answers": {
                "text": [
                    "single-tape Turing machines",
                    "single-tape",
                    "single-tape"
                ],
                "answer_start": [
                    318,
                    318,
                    318
                ]
            }
        },
        {
            "id": "56e1c2eee3433e1400423137",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What thesis specifies that a polynomial relationship exists within time complexities in a computational model? ",
            "answers": {
                "text": [
                    "Cobham-Edmonds thesis",
                    "Cobham-Edmonds",
                    "Cobham-Edmonds thesis"
                ],
                "answer_start": [
                    398,
                    398,
                    398
                ]
            }
        },
        {
            "id": "56e1c2eee3433e1400423138",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "Decision problems capable of being solved by a deterministic Turing machine while maintaining adherence to polynomial time belong to what class?",
            "answers": {
                "text": [
                    "complexity class P",
                    "P",
                    "complexity class P"
                ],
                "answer_start": [
                    597,
                    614,
                    597
                ]
            }
        },
        {
            "id": "5ad55ee35b96ef001a10ace4",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What does not often yield complexity classes that depend on the chosen machine model?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55ee35b96ef001a10ace5",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What does not frequently produce complexity classes that have concrete bounding of computation time?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55ee35b96ef001a10ace6",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What can not be solved in linear time on multi-tape Turing machine?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55ee35b96ef001a10ace7",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What is not a binary string?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55ee35b96ef001a10ace8",
            "title": "Computational_complexity_theory",
            "context": "But bounding the computation time above by some concrete function f(n) often yields complexity classes that depend on the chosen machine model. For instance, the language {xx | x is any binary string} can be solved in linear time on a multi-tape Turing machine, but necessarily requires quadratic time in the model of single-tape Turing machines. If we allow polynomial variations in running time, Cobham-Edmonds thesis states that \"the time complexities in any two reasonable and general models of computation are polynomially related\" (Goldreich 2008, Chapter 1.2). This forms the basis for the complexity class P, which is the set of decision problems solvable by a deterministic Turing machine within polynomial time. The corresponding set of function problems is FP.",
            "question": "What thesis specifies that a trinomial relationship exists within time complexities in a computational model?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c3e1e3433e1400423148",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What are two examples of measurements are bound within algorithms to establish complexity classes?",
            "answers": {
                "text": [
                    "time or space",
                    "time or space",
                    "time or space"
                ],
                "answer_start": [
                    65,
                    65,
                    65
                ]
            }
        },
        {
            "id": "56e1c3e1e3433e1400423149",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What function is used by algorithms to define measurements like time or space?",
            "answers": {
                "text": [
                    "bounding",
                    "bounding",
                    "bounding"
                ],
                "answer_start": [
                    52,
                    52,
                    52
                ]
            }
        },
        {
            "id": "56e1c3e1e3433e140042314a",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "Bounding of time and space or similar measurements is often used by algorithms to define what?",
            "answers": {
                "text": [
                    "complexity classes",
                    "complexity classes",
                    "complexity classes"
                ],
                "answer_start": [
                    15,
                    15,
                    15
                ]
            }
        },
        {
            "id": "5ad55fe75b96ef001a10ad0c",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What cannot be defined by bounding the time or space used the the algorithm?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55fe75b96ef001a10ad0d",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What are three examples of measurement that are bound within algorithms to establish complexity classes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55fe75b96ef001a10ad0e",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What function is used by algorithms to define measurements like time and numbers?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad55fe75b96ef001a10ad0f",
            "title": "Computational_complexity_theory",
            "context": "Many important complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of decision problems defined in this manner are the following:",
            "question": "What is often used by algorithms to measure bounding of space and atmosphere measurements?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c4fce3433e140042314e",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What are three examples of complexity classes associated with definitions established by probabilistic Turing machines?",
            "answers": {
                "text": [
                    "BPP, ZPP and RP",
                    "BPP, ZPP and RP",
                    "BPP, ZPP and RP"
                ],
                "answer_start": [
                    43,
                    43,
                    43
                ]
            }
        },
        {
            "id": "56e1c4fce3433e140042314f",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "AC and NC are complexity classes typically associated with what type of circuit?",
            "answers": {
                "text": [
                    "Boolean",
                    "Boolean",
                    "Boolean circuits;"
                ],
                "answer_start": [
                    150,
                    150,
                    150
                ]
            }
        },
        {
            "id": "56e1c4fce3433e1400423150",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "BQP and QMA are examples of complexity classes most commonly associated with what type of Turing machine?",
            "answers": {
                "text": [
                    "quantum",
                    "quantum",
                    "quantum"
                ],
                "answer_start": [
                    209,
                    209,
                    209
                ]
            }
        },
        {
            "id": "56e1c4fce3433e1400423151",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What is the expression used to represent a complexity class of counting problems?",
            "answers": {
                "text": [
                    "#P",
                    "#P",
                    "#P"
                ],
                "answer_start": [
                    234,
                    234,
                    234
                ]
            }
        },
        {
            "id": "56e1c4fce3433e1400423152",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "IP and AM are most commonly defined by what type of proof system?",
            "answers": {
                "text": [
                    "Interactive",
                    "Interactive",
                    "Interactive"
                ],
                "answer_start": [
                    357,
                    357,
                    357
                ]
            }
        },
        {
            "id": "5ad560b85b96ef001a10ad1e",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What are the other four important complexity classes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad560b85b96ef001a10ad1f",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What machine does not define BPP, ZPP, and RP?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad560b85b96ef001a10ad20",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What machine does not define BQP or QMA?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad560b85b96ef001a10ad21",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What is least important complexity class of counting problems?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad560b85b96ef001a10ad22",
            "title": "Computational_complexity_theory",
            "context": "Other important complexity classes include BPP, ZPP and RP, which are defined using probabilistic Turing machines; AC and NC, which are defined using Boolean circuits; and BQP and QMA, which are defined using quantum Turing machines. #P is an important complexity class of counting problems (not decision problems). Classes like IP and AM are defined using Interactive proof systems. ALL is the class of all decision problems.",
            "question": "What system not often define classes like IP and AM/",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c720e3433e140042316a",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What is an example of a measurement within a complexity class that would create a bigger set of problems if the bounds were relaxed?",
            "answers": {
                "text": [
                    "computation time",
                    "computation time",
                    "computation time"
                ],
                "answer_start": [
                    113,
                    113,
                    113
                ]
            }
        },
        {
            "id": "56e1c720e3433e140042316b",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "In what expression can one expect to find DTIME(n)",
            "answers": {
                "text": [
                    "DTIME(n2)",
                    "DTIME(n2)",
                    "DTIME(n2)"
                ],
                "answer_start": [
                    220,
                    220,
                    220
                ]
            }
        },
        {
            "id": "56e1c720e3433e140042316c",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What theorems are responsible for determining questions of time and space requirements?",
            "answers": {
                "text": [
                    "time and space hierarchy theorems",
                    "time and space hierarchy theorems",
                    "time and space hierarchy theorems"
                ],
                "answer_start": [
                    369,
                    369,
                    369
                ]
            }
        },
        {
            "id": "56e1c720e3433e140042316d",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "Resources are constrained by hierarchy theorems to produce what?",
            "answers": {
                "text": [
                    "a proper hierarchy on the classes defined",
                    "a proper hierarchy on the classes",
                    "a proper hierarchy"
                ],
                "answer_start": [
                    472,
                    472,
                    472
                ]
            }
        },
        {
            "id": "56e1c720e3433e140042316e",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What kind of statement is made in the effort of establishing the time and space requirements needed to enhance the ultimate number of problems solved?",
            "answers": {
                "text": [
                    "quantitative statements",
                    "quantitative",
                    "quantitative"
                ],
                "answer_start": [
                    714,
                    714,
                    714
                ]
            }
        },
        {
            "id": "5ad561c85b96ef001a10ad3c",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What is not an example of a measurement within a complexity class that would create a bigger set of problems if the bounds were relaxed?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad561c85b96ef001a10ad3d",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What does not define a bigger set of problems?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad561c85b96ef001a10ad3e",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What expression does not usually contain DTIME(n)?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad561c85b96ef001a10ad3f",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What does not induce a proper hierarchy on the classes defined by constraining the respective resources?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad561c85b96ef001a10ad40",
            "title": "Computational_complexity_theory",
            "context": "For the complexity classes defined in this way, it is desirable to prove that relaxing the requirements on (say) computation time indeed defines a bigger set of problems. In particular, although DTIME(n) is contained in DTIME(n2), it would be interesting to know if the inclusion is strict. For time and space requirements, the answer to such questions is given by the time and space hierarchy theorems respectively. They are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources. Thus there are pairs of complexity classes such that one is properly included in the other. Having deduced such proper set inclusions, we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved.",
            "question": "What kind of statement is not made in an effort of establishing the time and space requirements needed to enhance the ultimate number of problems solved?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c7e2cd28a01900c67b74",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What is the foundation for separation results within complexity classes?",
            "answers": {
                "text": [
                    "time and space hierarchy theorems",
                    "The time and space hierarchy theorems",
                    "time and space hierarchy theorems"
                ],
                "answer_start": [
                    4,
                    0,
                    4
                ]
            }
        },
        {
            "id": "56e1c7e2cd28a01900c67b75",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What is responsible for constraining P according to the time hierarchy theorem?",
            "answers": {
                "text": [
                    "EXPTIME",
                    "EXPTIME",
                    "EXPTIME"
                ],
                "answer_start": [
                    186,
                    186,
                    186
                ]
            }
        },
        {
            "id": "56e1c7e2cd28a01900c67b76",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "Within what variable is L constrained according to the space hierarchy theorem?",
            "answers": {
                "text": [
                    "PSPACE",
                    "PSPACE",
                    "PSPACE"
                ],
                "answer_start": [
                    268,
                    268,
                    268
                ]
            }
        },
        {
            "id": "5ad562525b96ef001a10ad50",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What does not form the basis for most separation results of complexity classes?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad562525b96ef001a10ad51",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What does the past time and space hierarchy theorems form the basis of?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad562525b96ef001a10ad52",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What is not strictly contained in EXPTIME?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad562525b96ef001a10ad53",
            "title": "Computational_complexity_theory",
            "context": "The time and space hierarchy theorems form the basis for most separation results of complexity classes. For instance, the time hierarchy theorem tells us that P is strictly contained in EXPTIME, and the space hierarchy theorem tells us that L is strictly contained in PSPACE.",
            "question": "What is not strictly contained in PSPACE?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1c9bfe3433e1400423192",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What concept is frequently used to define complexity classes?",
            "answers": {
                "text": [
                    "reduction",
                    "a reduction",
                    "reduction"
                ],
                "answer_start": [
                    59,
                    57,
                    59
                ]
            }
        },
        {
            "id": "56e1c9bfe3433e1400423193",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "Reduction essentially takes one problem and converts into what?",
            "answers": {
                "text": [
                    "another problem",
                    "another problem",
                    "another problem"
                ],
                "answer_start": [
                    122,
                    122,
                    122
                ]
            }
        },
        {
            "id": "56e1c9bfe3433e1400423194",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "According to reduction, if X and Y can be solved by the same algorithm then X performs what function in relationship to Y?",
            "answers": {
                "text": [
                    "reduces",
                    "reduces",
                    "X reduces to Y"
                ],
                "answer_start": [
                    350,
                    350,
                    348
                ]
            }
        },
        {
            "id": "56e1c9bfe3433e1400423195",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What are two examples of different types of reduction?",
            "answers": {
                "text": [
                    "Karp reductions and Levin reductions",
                    "Cook reductions, Karp reductions"
                ],
                "answer_start": [
                    469,
                    452
                ]
            }
        },
        {
            "id": "56e1c9bfe3433e1400423196",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "Polynomial time reductions are an example of what?",
            "answers": {
                "text": [
                    "the bound on the complexity of reductions",
                    "types of reductions",
                    "the bound on the complexity of reductions"
                ],
                "answer_start": [
                    511,
                    389,
                    511
                ]
            }
        },
        {
            "id": "5ad5632f5b96ef001a10ad6c",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What are many complexity classes not defined by?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5632f5b96ef001a10ad6d",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What is defined by using the theorem of reduction?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5632f5b96ef001a10ad6e",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What is a transformation of two problems into on three problems?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5632f5b96ef001a10ad6f",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What captures the formal notion of a problem being at lease as difficult as another problem?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5632f5b96ef001a10ad70",
            "title": "Computational_complexity_theory",
            "context": "Many complexity classes are defined using the concept of a reduction. A reduction is a transformation of one problem into another problem. It captures the informal notion of a problem being at least as difficult as another problem. For instance, if a problem X can be solved using an algorithm for Y, X is no more difficult than Y, and we say that X reduces to Y. There are many different types of reductions, based on the method of reduction, such as Cook reductions, Karp reductions and Levin reductions, and the bound on the complexity of reductions, such as polynomial-time reductions or log-space reductions.",
            "question": "What are the six types of reductions?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1cbe2cd28a01900c67bac",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What is the most frequently employed type of reduction?",
            "answers": {
                "text": [
                    "polynomial-time reduction",
                    "polynomial-time",
                    "polynomial-time reduction"
                ],
                "answer_start": [
                    38,
                    38,
                    38
                ]
            }
        },
        {
            "id": "56e1cbe2cd28a01900c67bad",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What equates to a squared integer according to polynomial time reduction?",
            "answers": {
                "text": [
                    "multiplying two integers",
                    "multiplying two integers",
                    "multiplying two integers"
                ],
                "answer_start": [
                    207,
                    207,
                    207
                ]
            }
        },
        {
            "id": "56e1cbe2cd28a01900c67bae",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What measurement of time is used in polynomial time reduction?",
            "answers": {
                "text": [
                    "polynomial time",
                    "polynomial",
                    "polynomial time"
                ],
                "answer_start": [
                    109,
                    109,
                    109
                ]
            }
        },
        {
            "id": "56e1cbe2cd28a01900c67baf",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What would need to remain constant in a multiplication algorithm to produce the same outcome whether multiplying or squaring two integers?  ",
            "answers": {
                "text": [
                    "input",
                    "input",
                    "input"
                ],
                "answer_start": [
                    364,
                    364,
                    364
                ]
            }
        },
        {
            "id": "56e1cbe2cd28a01900c67bb0",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "According to polynomial time reduction squaring can ultimately be logically reduced to what?",
            "answers": {
                "text": [
                    "multiplication",
                    "multiplication",
                    "multiplication"
                ],
                "answer_start": [
                    392,
                    520,
                    520
                ]
            }
        },
        {
            "id": "5ad5648b5b96ef001a10ad94",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What is the least used type of reduction?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5648b5b96ef001a10ad95",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What is the meaning of polynomial-space reduction?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5648b5b96ef001a10ad96",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What can the problem of dividing an integer be reduced to?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5648b5b96ef001a10ad97",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What does one not need to remain constant in a multiplication algorithm to produce the same outcome whether multiplying or squaring two integers?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad5648b5b96ef001a10ad98",
            "title": "Computational_complexity_theory",
            "context": "The most commonly used reduction is a polynomial-time reduction. This means that the reduction process takes polynomial time. For example, the problem of squaring an integer can be reduced to the problem of multiplying two integers. This means an algorithm for multiplying two integers can be used to square an integer. Indeed, this can be done by giving the same input to both inputs of the multiplication algorithm. Thus we see that squaring is not more difficult than multiplication, since squaring can be reduced to multiplication.",
            "question": "What is more difficult that multiplication?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1ce08e3433e14004231a4",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "The complexity of problems often depends on what?",
            "answers": {
                "text": [
                    "the type of reduction being used",
                    "the type of reduction being used"
                ],
                "answer_start": [
                    315,
                    315
                ]
            }
        },
        {
            "id": "56e1ce08e3433e14004231a5",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "What would create a conflict between a problem X and problem C within the context of reduction? ",
            "answers": {
                "text": [
                    "if every problem in C can be reduced to X",
                    "problem in C is harder than X"
                ],
                "answer_start": [
                    121,
                    172
                ]
            }
        },
        {
            "id": "56e1ce08e3433e14004231a6",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "An algorithm for X which reduces to C would us to do what?",
            "answers": {
                "text": [
                    "solve any problem in C",
                    "solve any problem in C",
                    "solve any problem in C"
                ],
                "answer_start": [
                    241,
                    241,
                    241
                ]
            }
        },
        {
            "id": "56e1ce08e3433e14004231a8",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "A problem set that that is hard for the expression NP can also be stated how?",
            "answers": {
                "text": [
                    "NP-hard",
                    "NP-hard",
                    "NP-hard problems"
                ],
                "answer_start": [
                    503,
                    503,
                    503
                ]
            }
        },
        {
            "id": "5ad565575b96ef001a10adb2",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "What does the complexity of problems not often depend on?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad565575b96ef001a10adb3",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "What would not create a conflict between a problem X and problem C within the context of reduction?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad565575b96ef001a10adb4",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "What problem in C is harder than X?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad565575b96ef001a10adb5",
            "title": "Computational_complexity_theory",
            "context": "This motivates the concept of a problem being hard for a complexity class. A problem X is hard for a class of problems C if every problem in C can be reduced to X. Thus no problem in C is harder than X, since an algorithm for X allows us to solve any problem in C. Of course, the notion of hard problems depends on the type of reduction being used. For complexity classes larger than P, polynomial-time reductions are commonly used. In particular, the set of problems that are hard for NP is the set of NP-hard problems.",
            "question": "How is a problem set that is hard for expression QP be stated?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1d9fee3433e14004231cb",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "The hardest problems in NP can be analogously written as what class of problems?",
            "answers": {
                "text": [
                    "NP-complete",
                    "NP-complete",
                    "NP-complete"
                ],
                "answer_start": [
                    244,
                    244,
                    244
                ]
            }
        },
        {
            "id": "56e1d9fee3433e14004231cc",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "NP complete problems contain the lowest likelihood of being located in what problem class?",
            "answers": {
                "text": [
                    "NP",
                    "P",
                    "P"
                ],
                "answer_start": [
                    244,
                    370,
                    370
                ]
            }
        },
        {
            "id": "56e1d9fee3433e14004231cd",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "If P = NP is unsolved, and reduction is applied to a known NP-complete problem vis a vis Π2 to  Π1, what conclusion can be drawn for Π1?",
            "answers": {
                "text": [
                    "there is no known polynomial-time solution",
                    "no known polynomial-time solution",
                    "there is no known polynomial-time solution"
                ],
                "answer_start": [
                    513,
                    522,
                    513
                ]
            }
        },
        {
            "id": "56e1d9fee3433e14004231ce",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "If polynomial time can be utilized within an NP-complete problem, what does the imply P is equal to?",
            "answers": {
                "text": [
                    "NP",
                    "NP",
                    "NP"
                ],
                "answer_start": [
                    244,
                    810,
                    810
                ]
            }
        },
        {
            "id": "5ad566375b96ef001a10adce",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "What happens if a problem X is in C, and soft for C?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad566375b96ef001a10adcf",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "What is the softest problem in C?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad566375b96ef001a10add0",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "What is class contains the the least difficult problems in NP?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "5ad566375b96ef001a10add1",
            "title": "Computational_complexity_theory",
            "context": "If a problem X is in C and hard for C, then X is said to be complete for C. This means that X is the hardest problem in C. (Since many problems could be equally hard, one might say that X is one of the hardest problems in C.) Thus the class of NP-complete problems contains the most difficult problems in NP, in the sense that they are the ones most likely not to be in P. Because the problem P = NP is not solved, being able to reduce a known NP-complete problem, Π2, to another problem, Π1, would indicate that there is no known polynomial-time solution for Π1. This is because a polynomial-time solution to Π1 would yield a polynomial-time solution to Π2. Similarly, because all NP problems can be reduced to the set, finding an NP-complete problem that can be solved in polynomial time would mean that P = NP.",
            "question": "What would indicate that there is a known polynomial-time solution for Ii1?",
            "answers": {
                "text": [],
                "answer_start": []
            }
        },
        {
            "id": "56e1dc62cd28a01900c67bca",
            "title": "Computational_complexity_theory",
            "context": "The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham–Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.",
            "question": "What complexity class is characterized by a computational tasks and efficient algorithms?",
            "answers": {
                "text": [
                    "P",
                    "P",
                    "P"
                ],
                "answer_start": [
                    21,
                    21,
                    21
                ]
            }
        },
        {
            "id": "56e1dc62cd28a01900c67bcb",
            "title": "Computational_complexity_theory",
            "context": "The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham–Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.",
            "question": "What hypothesis is associated with the complexity class of P viewed as a mathematical abstraction with efficient algorithmic functionality?",
            "answers": {
                "text": [
                    "Cobham–Edmonds thesis",
                    "Cobham–Edmonds thesis",
                    "Cobham–Edmonds thesis"
                ],
                "answer_start": [
                    167,
                    167,
                    167
                ]
            }
        },
        {
            "id": "56e1dc62cd28a01900c67bcc",
            "title": "Computational_complexity_theory",
            "context": "The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham–Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.",
            "question": "What complexity class is commonly characterized by unknown algorithms to enhance solvability?",
            "answers": {
                "text": [
                    "NP",
                    "NP",
                    "NP"
                ],
                "answer_start": [
                    211,
                    211,
                    211
                ]
            }
        },
        {
            "id": "56e1dc62cd28a01900c67bcd",
            "title": "Computational_complexity_theory",
            "context": "The complexity class P is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm. This hypothesis is called the Cobham–Edmonds thesis. The complexity class NP, on the other hand, contains many problems that people would like to solve efficiently, but for which no efficient algorithm is known, such as the Boolean satisfiability problem, the Hamiltonian path problem and the vertex cover problem. Since deterministic Turing machines are special non-deterministic Turing machines, it is easily observed that each problem in P is also member of the class NP.",
            "question": "What is an example of a problem that rests within the NP complexity class?",
            "answers": {
                "text": [
                    "Boolean satisfiability problem",
                    "Boolean satisfiability problem"
                ],
                "answer_start": [
                    361,
                    361
                ]
            }
        }
    ]
}